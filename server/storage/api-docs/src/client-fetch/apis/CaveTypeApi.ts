/* tslint:disable */
/* eslint-disable */
/**
 * 
 * 
 *
 * 
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';

export interface 32d694f9aceadd67af72aef20ac33467Request {
    id: number;
    name?: string;
}

export interface 384448f895a8883569eb386b1ee359dcRequest {
    id: number;
}

export interface 8aca8360affea531d604a5c03b92f24dRequest {
    name?: string;
}

export interface Dc66aac759b9c8cb9d085b553c4a1371Request {
    id: number;
}

/**
 * 
 */
export class CaveTypeApi extends runtime.BaseAPI {

    /**
     * Get all CaveTypes
     * getCaveTypeList
     */
    async _25165acbf62fa3c489e9491389b227b3Raw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/caveTypes`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Get all CaveTypes
     * getCaveTypeList
     */
    async _25165acbf62fa3c489e9491389b227b3(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this._25165acbf62fa3c489e9491389b227b3Raw(initOverrides);
    }

    /**
     * Update CaveType
     * updateCaveType
     */
    async _32d694f9aceadd67af72aef20ac33467Raw(requestParameters: 32d694f9aceadd67af72aef20ac33467Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling _32d694f9aceadd67af72aef20ac33467.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const consumes: runtime.Consume[] = [
            { contentType: 'application/x-www-form-urlencoded' },
        ];
        // @ts-ignore: canConsumeForm may be unused
        const canConsumeForm = runtime.canConsumeForm(consumes);

        let formParams: { append(param: string, value: any): any };
        let useForm = false;
        if (useForm) {
            formParams = new FormData();
        } else {
            formParams = new URLSearchParams();
        }

        if (requestParameters.name !== undefined) {
            formParams.append('name', requestParameters.name as any);
        }

        const response = await this.request({
            path: `/caveTypes/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: formParams,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Update CaveType
     * updateCaveType
     */
    async _32d694f9aceadd67af72aef20ac33467(requestParameters: 32d694f9aceadd67af72aef20ac33467Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this._32d694f9aceadd67af72aef20ac33467Raw(requestParameters, initOverrides);
    }

    /**
     * Get CaveType
     * getCaveTypeItem
     */
    async _384448f895a8883569eb386b1ee359dcRaw(requestParameters: 384448f895a8883569eb386b1ee359dcRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling _384448f895a8883569eb386b1ee359dc.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/caveTypes/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Get CaveType
     * getCaveTypeItem
     */
    async _384448f895a8883569eb386b1ee359dc(requestParameters: 384448f895a8883569eb386b1ee359dcRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this._384448f895a8883569eb386b1ee359dcRaw(requestParameters, initOverrides);
    }

    /**
     * Create CaveType
     * createCaveType
     */
    async _8aca8360affea531d604a5c03b92f24dRaw(requestParameters: 8aca8360affea531d604a5c03b92f24dRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const consumes: runtime.Consume[] = [
            { contentType: 'application/x-www-form-urlencoded' },
        ];
        // @ts-ignore: canConsumeForm may be unused
        const canConsumeForm = runtime.canConsumeForm(consumes);

        let formParams: { append(param: string, value: any): any };
        let useForm = false;
        if (useForm) {
            formParams = new FormData();
        } else {
            formParams = new URLSearchParams();
        }

        if (requestParameters.name !== undefined) {
            formParams.append('name', requestParameters.name as any);
        }

        const response = await this.request({
            path: `/caveTypes`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: formParams,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Create CaveType
     * createCaveType
     */
    async _8aca8360affea531d604a5c03b92f24d(requestParameters: 8aca8360affea531d604a5c03b92f24dRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this._8aca8360affea531d604a5c03b92f24dRaw(requestParameters, initOverrides);
    }

    /**
     * Delete CaveType
     * deleteCaveType
     */
    async dc66aac759b9c8cb9d085b553c4a1371Raw(requestParameters: Dc66aac759b9c8cb9d085b553c4a1371Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling dc66aac759b9c8cb9d085b553c4a1371.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/caveTypes/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete CaveType
     * deleteCaveType
     */
    async dc66aac759b9c8cb9d085b553c4a1371(requestParameters: Dc66aac759b9c8cb9d085b553c4a1371Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.dc66aac759b9c8cb9d085b553c4a1371Raw(requestParameters, initOverrides);
    }

}
