/* tslint:disable */
/* eslint-disable */
/**
 * 
 * 
 *
 * 
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';

export interface 0b7098a3a4db3f15d66d5d173d9b70b9Request {
    id: number;
    name?: string;
}

export interface 2681ef5be66c133e9568f713e314cff1Request {
    name?: string;
}

export interface 53a160ba0cab52eadcafc744884ce3b3Request {
    id: number;
}

export interface 9e8ab160c3a28640fafc3953110f313eRequest {
    id: number;
}

/**
 * 
 */
export class CaveEntranceApi extends runtime.BaseAPI {

    /**
     * Update CaveEntrance
     * updateCaveEntrance
     */
    async _0b7098a3a4db3f15d66d5d173d9b70b9Raw(requestParameters: 0b7098a3a4db3f15d66d5d173d9b70b9Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling _0b7098a3a4db3f15d66d5d173d9b70b9.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const consumes: runtime.Consume[] = [
            { contentType: 'application/x-www-form-urlencoded' },
        ];
        // @ts-ignore: canConsumeForm may be unused
        const canConsumeForm = runtime.canConsumeForm(consumes);

        let formParams: { append(param: string, value: any): any };
        let useForm = false;
        if (useForm) {
            formParams = new FormData();
        } else {
            formParams = new URLSearchParams();
        }

        if (requestParameters.name !== undefined) {
            formParams.append('name', requestParameters.name as any);
        }

        const response = await this.request({
            path: `/caveEntrances/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: formParams,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Update CaveEntrance
     * updateCaveEntrance
     */
    async _0b7098a3a4db3f15d66d5d173d9b70b9(requestParameters: 0b7098a3a4db3f15d66d5d173d9b70b9Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this._0b7098a3a4db3f15d66d5d173d9b70b9Raw(requestParameters, initOverrides);
    }

    /**
     * Create CaveEntrance
     * createCaveEntrance
     */
    async _2681ef5be66c133e9568f713e314cff1Raw(requestParameters: 2681ef5be66c133e9568f713e314cff1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const consumes: runtime.Consume[] = [
            { contentType: 'application/x-www-form-urlencoded' },
        ];
        // @ts-ignore: canConsumeForm may be unused
        const canConsumeForm = runtime.canConsumeForm(consumes);

        let formParams: { append(param: string, value: any): any };
        let useForm = false;
        if (useForm) {
            formParams = new FormData();
        } else {
            formParams = new URLSearchParams();
        }

        if (requestParameters.name !== undefined) {
            formParams.append('name', requestParameters.name as any);
        }

        const response = await this.request({
            path: `/caveEntrances`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: formParams,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Create CaveEntrance
     * createCaveEntrance
     */
    async _2681ef5be66c133e9568f713e314cff1(requestParameters: 2681ef5be66c133e9568f713e314cff1Request = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this._2681ef5be66c133e9568f713e314cff1Raw(requestParameters, initOverrides);
    }

    /**
     * Get CaveEntrance
     * getCaveEntranceItem
     */
    async _53a160ba0cab52eadcafc744884ce3b3Raw(requestParameters: 53a160ba0cab52eadcafc744884ce3b3Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling _53a160ba0cab52eadcafc744884ce3b3.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/caveEntrances/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Get CaveEntrance
     * getCaveEntranceItem
     */
    async _53a160ba0cab52eadcafc744884ce3b3(requestParameters: 53a160ba0cab52eadcafc744884ce3b3Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this._53a160ba0cab52eadcafc744884ce3b3Raw(requestParameters, initOverrides);
    }

    /**
     * Get all CaveEntrances
     * getCaveEntranceList
     */
    async _632f6231938573947ef4f90a83558ae3Raw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/caveEntrances`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Get all CaveEntrances
     * getCaveEntranceList
     */
    async _632f6231938573947ef4f90a83558ae3(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this._632f6231938573947ef4f90a83558ae3Raw(initOverrides);
    }

    /**
     * Delete CaveEntrance
     * deleteCaveEntrance
     */
    async _9e8ab160c3a28640fafc3953110f313eRaw(requestParameters: 9e8ab160c3a28640fafc3953110f313eRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling _9e8ab160c3a28640fafc3953110f313e.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/caveEntrances/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete CaveEntrance
     * deleteCaveEntrance
     */
    async _9e8ab160c3a28640fafc3953110f313e(requestParameters: 9e8ab160c3a28640fafc3953110f313eRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this._9e8ab160c3a28640fafc3953110f313eRaw(requestParameters, initOverrides);
    }

}
