/* tslint:disable */
/* eslint-disable */
/**
 * 
 * 
 *
 * 
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';

export interface 9b2c3c9068d68c1aead0b780d2a84df4Request {
    id: number;
}

export interface B79f907f629f9a57359460592e651c83Request {
    name?: string;
}

export interface E0aedf41c24fab81d1267a77a1d5c4cfRequest {
    id: number;
    name?: string;
}

export interface F7d2397b4f108ed49cf6c35919cf9774Request {
    id: number;
}

/**
 * 
 */
export class FeatureTypeApi extends runtime.BaseAPI {

    /**
     * Get FeatureType
     * getFeatureTypeItem
     */
    async _9b2c3c9068d68c1aead0b780d2a84df4Raw(requestParameters: 9b2c3c9068d68c1aead0b780d2a84df4Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling _9b2c3c9068d68c1aead0b780d2a84df4.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/featureTypes/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Get FeatureType
     * getFeatureTypeItem
     */
    async _9b2c3c9068d68c1aead0b780d2a84df4(requestParameters: 9b2c3c9068d68c1aead0b780d2a84df4Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this._9b2c3c9068d68c1aead0b780d2a84df4Raw(requestParameters, initOverrides);
    }

    /**
     * Create FeatureType
     * createFeatureType
     */
    async b79f907f629f9a57359460592e651c83Raw(requestParameters: B79f907f629f9a57359460592e651c83Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const consumes: runtime.Consume[] = [
            { contentType: 'application/x-www-form-urlencoded' },
        ];
        // @ts-ignore: canConsumeForm may be unused
        const canConsumeForm = runtime.canConsumeForm(consumes);

        let formParams: { append(param: string, value: any): any };
        let useForm = false;
        if (useForm) {
            formParams = new FormData();
        } else {
            formParams = new URLSearchParams();
        }

        if (requestParameters.name !== undefined) {
            formParams.append('name', requestParameters.name as any);
        }

        const response = await this.request({
            path: `/featureTypes`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: formParams,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Create FeatureType
     * createFeatureType
     */
    async b79f907f629f9a57359460592e651c83(requestParameters: B79f907f629f9a57359460592e651c83Request = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.b79f907f629f9a57359460592e651c83Raw(requestParameters, initOverrides);
    }

    /**
     * Get all FeatureTypes
     * getFeatureTypeList
     */
    async ca224d295015eea907de4ffb54c20ec5Raw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/featureTypes`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Get all FeatureTypes
     * getFeatureTypeList
     */
    async ca224d295015eea907de4ffb54c20ec5(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.ca224d295015eea907de4ffb54c20ec5Raw(initOverrides);
    }

    /**
     * Update FeatureType
     * updateFeatureType
     */
    async e0aedf41c24fab81d1267a77a1d5c4cfRaw(requestParameters: E0aedf41c24fab81d1267a77a1d5c4cfRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling e0aedf41c24fab81d1267a77a1d5c4cf.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const consumes: runtime.Consume[] = [
            { contentType: 'application/x-www-form-urlencoded' },
        ];
        // @ts-ignore: canConsumeForm may be unused
        const canConsumeForm = runtime.canConsumeForm(consumes);

        let formParams: { append(param: string, value: any): any };
        let useForm = false;
        if (useForm) {
            formParams = new FormData();
        } else {
            formParams = new URLSearchParams();
        }

        if (requestParameters.name !== undefined) {
            formParams.append('name', requestParameters.name as any);
        }

        const response = await this.request({
            path: `/featureTypes/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: formParams,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Update FeatureType
     * updateFeatureType
     */
    async e0aedf41c24fab81d1267a77a1d5c4cf(requestParameters: E0aedf41c24fab81d1267a77a1d5c4cfRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.e0aedf41c24fab81d1267a77a1d5c4cfRaw(requestParameters, initOverrides);
    }

    /**
     * Delete FeatureType
     * deleteFeatureType
     */
    async f7d2397b4f108ed49cf6c35919cf9774Raw(requestParameters: F7d2397b4f108ed49cf6c35919cf9774Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling f7d2397b4f108ed49cf6c35919cf9774.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/featureTypes/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete FeatureType
     * deleteFeatureType
     */
    async f7d2397b4f108ed49cf6c35919cf9774(requestParameters: F7d2397b4f108ed49cf6c35919cf9774Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.f7d2397b4f108ed49cf6c35919cf9774Raw(requestParameters, initOverrides);
    }

}
