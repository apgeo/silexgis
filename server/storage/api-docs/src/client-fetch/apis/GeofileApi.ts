/* tslint:disable */
/* eslint-disable */
/**
 * 
 * 
 *
 * 
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';

export interface 0141b5c135ccd51a7fafb9a7c20f71b9Request {
    id: number;
}

export interface 25839bb1394106bf96af8dcddffa540dRequest {
    name?: string;
}

export interface 56bd25e41f984f40623f142b39f5e827Request {
    id: number;
    name?: string;
}

export interface 7926eea4a2535dbf125e3f0c7b01c0d5Request {
    id: number;
}

/**
 * 
 */
export class GeofileApi extends runtime.BaseAPI {

    /**
     * Delete Geofile
     * deleteGeofile
     */
    async _0141b5c135ccd51a7fafb9a7c20f71b9Raw(requestParameters: 0141b5c135ccd51a7fafb9a7c20f71b9Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling _0141b5c135ccd51a7fafb9a7c20f71b9.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/geofiles/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete Geofile
     * deleteGeofile
     */
    async _0141b5c135ccd51a7fafb9a7c20f71b9(requestParameters: 0141b5c135ccd51a7fafb9a7c20f71b9Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this._0141b5c135ccd51a7fafb9a7c20f71b9Raw(requestParameters, initOverrides);
    }

    /**
     * Create Geofile
     * createGeofile
     */
    async _25839bb1394106bf96af8dcddffa540dRaw(requestParameters: 25839bb1394106bf96af8dcddffa540dRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const consumes: runtime.Consume[] = [
            { contentType: 'application/x-www-form-urlencoded' },
        ];
        // @ts-ignore: canConsumeForm may be unused
        const canConsumeForm = runtime.canConsumeForm(consumes);

        let formParams: { append(param: string, value: any): any };
        let useForm = false;
        if (useForm) {
            formParams = new FormData();
        } else {
            formParams = new URLSearchParams();
        }

        if (requestParameters.name !== undefined) {
            formParams.append('name', requestParameters.name as any);
        }

        const response = await this.request({
            path: `/geofiles`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: formParams,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Create Geofile
     * createGeofile
     */
    async _25839bb1394106bf96af8dcddffa540d(requestParameters: 25839bb1394106bf96af8dcddffa540dRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this._25839bb1394106bf96af8dcddffa540dRaw(requestParameters, initOverrides);
    }

    /**
     * Update Geofile
     * updateGeofile
     */
    async _56bd25e41f984f40623f142b39f5e827Raw(requestParameters: 56bd25e41f984f40623f142b39f5e827Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling _56bd25e41f984f40623f142b39f5e827.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const consumes: runtime.Consume[] = [
            { contentType: 'application/x-www-form-urlencoded' },
        ];
        // @ts-ignore: canConsumeForm may be unused
        const canConsumeForm = runtime.canConsumeForm(consumes);

        let formParams: { append(param: string, value: any): any };
        let useForm = false;
        if (useForm) {
            formParams = new FormData();
        } else {
            formParams = new URLSearchParams();
        }

        if (requestParameters.name !== undefined) {
            formParams.append('name', requestParameters.name as any);
        }

        const response = await this.request({
            path: `/geofiles/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: formParams,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Update Geofile
     * updateGeofile
     */
    async _56bd25e41f984f40623f142b39f5e827(requestParameters: 56bd25e41f984f40623f142b39f5e827Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this._56bd25e41f984f40623f142b39f5e827Raw(requestParameters, initOverrides);
    }

    /**
     * Get all Geofiles
     * getGeofileList
     */
    async _5bb6226b9c5373a0798ea335b8620269Raw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/geofiles`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Get all Geofiles
     * getGeofileList
     */
    async _5bb6226b9c5373a0798ea335b8620269(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this._5bb6226b9c5373a0798ea335b8620269Raw(initOverrides);
    }

    /**
     * Get Geofile
     * getGeofileItem
     */
    async _7926eea4a2535dbf125e3f0c7b01c0d5Raw(requestParameters: 7926eea4a2535dbf125e3f0c7b01c0d5Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling _7926eea4a2535dbf125e3f0c7b01c0d5.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/geofiles/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Get Geofile
     * getGeofileItem
     */
    async _7926eea4a2535dbf125e3f0c7b01c0d5(requestParameters: 7926eea4a2535dbf125e3f0c7b01c0d5Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this._7926eea4a2535dbf125e3f0c7b01c0d5Raw(requestParameters, initOverrides);
    }

}
