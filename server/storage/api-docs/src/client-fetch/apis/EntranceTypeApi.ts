/* tslint:disable */
/* eslint-disable */
/**
 * 
 * 
 *
 * 
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';

export interface 0f4f2571698f671d4964dbae0cc0bb2eRequest {
    id: number;
}

export interface 1d29dd792139235db6955b6b998e529cRequest {
    name?: string;
}

export interface 3a00d9620c2ef33412466aa18158100bRequest {
    id: number;
    name?: string;
}

export interface 70253d281e06166f2d1b6a897694128eRequest {
    id: number;
}

/**
 * 
 */
export class EntranceTypeApi extends runtime.BaseAPI {

    /**
     * Get EntranceType
     * getEntranceTypeItem
     */
    async _0f4f2571698f671d4964dbae0cc0bb2eRaw(requestParameters: 0f4f2571698f671d4964dbae0cc0bb2eRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling _0f4f2571698f671d4964dbae0cc0bb2e.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/entranceTypes/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Get EntranceType
     * getEntranceTypeItem
     */
    async _0f4f2571698f671d4964dbae0cc0bb2e(requestParameters: 0f4f2571698f671d4964dbae0cc0bb2eRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this._0f4f2571698f671d4964dbae0cc0bb2eRaw(requestParameters, initOverrides);
    }

    /**
     * Create EntranceType
     * createEntranceType
     */
    async _1d29dd792139235db6955b6b998e529cRaw(requestParameters: 1d29dd792139235db6955b6b998e529cRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const consumes: runtime.Consume[] = [
            { contentType: 'application/x-www-form-urlencoded' },
        ];
        // @ts-ignore: canConsumeForm may be unused
        const canConsumeForm = runtime.canConsumeForm(consumes);

        let formParams: { append(param: string, value: any): any };
        let useForm = false;
        if (useForm) {
            formParams = new FormData();
        } else {
            formParams = new URLSearchParams();
        }

        if (requestParameters.name !== undefined) {
            formParams.append('name', requestParameters.name as any);
        }

        const response = await this.request({
            path: `/entranceTypes`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: formParams,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Create EntranceType
     * createEntranceType
     */
    async _1d29dd792139235db6955b6b998e529c(requestParameters: 1d29dd792139235db6955b6b998e529cRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this._1d29dd792139235db6955b6b998e529cRaw(requestParameters, initOverrides);
    }

    /**
     * Update EntranceType
     * updateEntranceType
     */
    async _3a00d9620c2ef33412466aa18158100bRaw(requestParameters: 3a00d9620c2ef33412466aa18158100bRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling _3a00d9620c2ef33412466aa18158100b.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const consumes: runtime.Consume[] = [
            { contentType: 'application/x-www-form-urlencoded' },
        ];
        // @ts-ignore: canConsumeForm may be unused
        const canConsumeForm = runtime.canConsumeForm(consumes);

        let formParams: { append(param: string, value: any): any };
        let useForm = false;
        if (useForm) {
            formParams = new FormData();
        } else {
            formParams = new URLSearchParams();
        }

        if (requestParameters.name !== undefined) {
            formParams.append('name', requestParameters.name as any);
        }

        const response = await this.request({
            path: `/entranceTypes/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: formParams,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Update EntranceType
     * updateEntranceType
     */
    async _3a00d9620c2ef33412466aa18158100b(requestParameters: 3a00d9620c2ef33412466aa18158100bRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this._3a00d9620c2ef33412466aa18158100bRaw(requestParameters, initOverrides);
    }

    /**
     * Delete EntranceType
     * deleteEntranceType
     */
    async _70253d281e06166f2d1b6a897694128eRaw(requestParameters: 70253d281e06166f2d1b6a897694128eRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling _70253d281e06166f2d1b6a897694128e.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/entranceTypes/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete EntranceType
     * deleteEntranceType
     */
    async _70253d281e06166f2d1b6a897694128e(requestParameters: 70253d281e06166f2d1b6a897694128eRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this._70253d281e06166f2d1b6a897694128eRaw(requestParameters, initOverrides);
    }

    /**
     * Get all EntranceTypes
     * getEntranceTypeList
     */
    async d1ac8dd066753a9268189bef9e8d7516Raw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/entranceTypes`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Get all EntranceTypes
     * getEntranceTypeList
     */
    async d1ac8dd066753a9268189bef9e8d7516(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.d1ac8dd066753a9268189bef9e8d7516Raw(initOverrides);
    }

}
