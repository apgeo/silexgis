/* tslint:disable */
/* eslint-disable */
/**
 * 
 * 
 *
 * 
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';

export interface 3465c05467f56755d8fde6dfe336f784Request {
    name?: string;
}

export interface Acefdff5c10ad10456b5e12506f8ab63Request {
    id: number;
    name?: string;
}

export interface B3671c968c691df9358298f3a285c767Request {
    id: number;
}

export interface Ca775ff26d0144e4b01abbd8c926f7c3Request {
    id: number;
}

/**
 * 
 */
export class UserApi extends runtime.BaseAPI {

    /**
     * Get all Users
     * getUserList
     */
    async _1df092f5eddb2e29c3c5aa8043dd6d44Raw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/users`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Get all Users
     * getUserList
     */
    async _1df092f5eddb2e29c3c5aa8043dd6d44(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this._1df092f5eddb2e29c3c5aa8043dd6d44Raw(initOverrides);
    }

    /**
     * Create User
     * createUser
     */
    async _3465c05467f56755d8fde6dfe336f784Raw(requestParameters: 3465c05467f56755d8fde6dfe336f784Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const consumes: runtime.Consume[] = [
            { contentType: 'application/x-www-form-urlencoded' },
        ];
        // @ts-ignore: canConsumeForm may be unused
        const canConsumeForm = runtime.canConsumeForm(consumes);

        let formParams: { append(param: string, value: any): any };
        let useForm = false;
        if (useForm) {
            formParams = new FormData();
        } else {
            formParams = new URLSearchParams();
        }

        if (requestParameters.name !== undefined) {
            formParams.append('name', requestParameters.name as any);
        }

        const response = await this.request({
            path: `/users`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: formParams,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Create User
     * createUser
     */
    async _3465c05467f56755d8fde6dfe336f784(requestParameters: 3465c05467f56755d8fde6dfe336f784Request = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this._3465c05467f56755d8fde6dfe336f784Raw(requestParameters, initOverrides);
    }

    /**
     * Update User
     * updateUser
     */
    async acefdff5c10ad10456b5e12506f8ab63Raw(requestParameters: Acefdff5c10ad10456b5e12506f8ab63Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling acefdff5c10ad10456b5e12506f8ab63.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const consumes: runtime.Consume[] = [
            { contentType: 'application/x-www-form-urlencoded' },
        ];
        // @ts-ignore: canConsumeForm may be unused
        const canConsumeForm = runtime.canConsumeForm(consumes);

        let formParams: { append(param: string, value: any): any };
        let useForm = false;
        if (useForm) {
            formParams = new FormData();
        } else {
            formParams = new URLSearchParams();
        }

        if (requestParameters.name !== undefined) {
            formParams.append('name', requestParameters.name as any);
        }

        const response = await this.request({
            path: `/users/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: formParams,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Update User
     * updateUser
     */
    async acefdff5c10ad10456b5e12506f8ab63(requestParameters: Acefdff5c10ad10456b5e12506f8ab63Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.acefdff5c10ad10456b5e12506f8ab63Raw(requestParameters, initOverrides);
    }

    /**
     * Delete User
     * deleteUser
     */
    async b3671c968c691df9358298f3a285c767Raw(requestParameters: B3671c968c691df9358298f3a285c767Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling b3671c968c691df9358298f3a285c767.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/users/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete User
     * deleteUser
     */
    async b3671c968c691df9358298f3a285c767(requestParameters: B3671c968c691df9358298f3a285c767Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.b3671c968c691df9358298f3a285c767Raw(requestParameters, initOverrides);
    }

    /**
     * Get User
     * getUserItem
     */
    async ca775ff26d0144e4b01abbd8c926f7c3Raw(requestParameters: Ca775ff26d0144e4b01abbd8c926f7c3Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling ca775ff26d0144e4b01abbd8c926f7c3.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/users/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Get User
     * getUserItem
     */
    async ca775ff26d0144e4b01abbd8c926f7c3(requestParameters: Ca775ff26d0144e4b01abbd8c926f7c3Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.ca775ff26d0144e4b01abbd8c926f7c3Raw(requestParameters, initOverrides);
    }

}
