/* tslint:disable */
/* eslint-disable */
/**
 * 
 * 
 *
 * 
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';

export interface 1c622d9db9c463a33aa532b32f3d23deRequest {
    id: number;
}

export interface 577a84bf0de4130a9b10d13f0c622bf1Request {
    name?: string;
}

export interface 704e65587b6fff0267744aa4bc2adabaRequest {
    id: number;
    name?: string;
}

export interface Ea8453b16a586fecc4057c830d319683Request {
    id: number;
}

/**
 * 
 */
export class CaveApi extends runtime.BaseAPI {

    /**
     * Get all Caves
     * getCaveList
     */
    async _14757fb12ad2e8397562b4882969690fRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/caves`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Get all Caves
     * getCaveList
     */
    async _14757fb12ad2e8397562b4882969690f(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this._14757fb12ad2e8397562b4882969690fRaw(initOverrides);
    }

    /**
     * Get Cave
     * getCaveItem
     */
    async _1c622d9db9c463a33aa532b32f3d23deRaw(requestParameters: 1c622d9db9c463a33aa532b32f3d23deRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling _1c622d9db9c463a33aa532b32f3d23de.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/caves/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Get Cave
     * getCaveItem
     */
    async _1c622d9db9c463a33aa532b32f3d23de(requestParameters: 1c622d9db9c463a33aa532b32f3d23deRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this._1c622d9db9c463a33aa532b32f3d23deRaw(requestParameters, initOverrides);
    }

    /**
     * Create Cave
     * createCave
     */
    async _577a84bf0de4130a9b10d13f0c622bf1Raw(requestParameters: 577a84bf0de4130a9b10d13f0c622bf1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const consumes: runtime.Consume[] = [
            { contentType: 'application/x-www-form-urlencoded' },
        ];
        // @ts-ignore: canConsumeForm may be unused
        const canConsumeForm = runtime.canConsumeForm(consumes);

        let formParams: { append(param: string, value: any): any };
        let useForm = false;
        if (useForm) {
            formParams = new FormData();
        } else {
            formParams = new URLSearchParams();
        }

        if (requestParameters.name !== undefined) {
            formParams.append('name', requestParameters.name as any);
        }

        const response = await this.request({
            path: `/caves`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: formParams,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Create Cave
     * createCave
     */
    async _577a84bf0de4130a9b10d13f0c622bf1(requestParameters: 577a84bf0de4130a9b10d13f0c622bf1Request = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this._577a84bf0de4130a9b10d13f0c622bf1Raw(requestParameters, initOverrides);
    }

    /**
     * Update Cave
     * updateCave
     */
    async _704e65587b6fff0267744aa4bc2adabaRaw(requestParameters: 704e65587b6fff0267744aa4bc2adabaRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling _704e65587b6fff0267744aa4bc2adaba.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const consumes: runtime.Consume[] = [
            { contentType: 'application/x-www-form-urlencoded' },
        ];
        // @ts-ignore: canConsumeForm may be unused
        const canConsumeForm = runtime.canConsumeForm(consumes);

        let formParams: { append(param: string, value: any): any };
        let useForm = false;
        if (useForm) {
            formParams = new FormData();
        } else {
            formParams = new URLSearchParams();
        }

        if (requestParameters.name !== undefined) {
            formParams.append('name', requestParameters.name as any);
        }

        const response = await this.request({
            path: `/caves/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: formParams,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Update Cave
     * updateCave
     */
    async _704e65587b6fff0267744aa4bc2adaba(requestParameters: 704e65587b6fff0267744aa4bc2adabaRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this._704e65587b6fff0267744aa4bc2adabaRaw(requestParameters, initOverrides);
    }

    /**
     * Delete Cave
     * deleteCave
     */
    async ea8453b16a586fecc4057c830d319683Raw(requestParameters: Ea8453b16a586fecc4057c830d319683Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling ea8453b16a586fecc4057c830d319683.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/caves/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete Cave
     * deleteCave
     */
    async ea8453b16a586fecc4057c830d319683(requestParameters: Ea8453b16a586fecc4057c830d319683Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.ea8453b16a586fecc4057c830d319683Raw(requestParameters, initOverrides);
    }

}
