/* tslint:disable */
/* eslint-disable */
/**
 * 
 * 
 *
 * 
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';

export interface 3ac95b87739c3f60f50f01405bde87adRequest {
    id: number;
    name?: string;
}

export interface 4aa2b06765e6a46bfee37102d6810c88Request {
    id: number;
}

export interface A8600d888983a5555731f45fa9600ddbRequest {
    id: number;
}

export interface C4d265e8dccd6fd68487c2bfbe5943acRequest {
    name?: string;
}

/**
 * 
 */
export class LogApi extends runtime.BaseAPI {

    /**
     * Update Log
     * updateLog
     */
    async _3ac95b87739c3f60f50f01405bde87adRaw(requestParameters: 3ac95b87739c3f60f50f01405bde87adRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling _3ac95b87739c3f60f50f01405bde87ad.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const consumes: runtime.Consume[] = [
            { contentType: 'application/x-www-form-urlencoded' },
        ];
        // @ts-ignore: canConsumeForm may be unused
        const canConsumeForm = runtime.canConsumeForm(consumes);

        let formParams: { append(param: string, value: any): any };
        let useForm = false;
        if (useForm) {
            formParams = new FormData();
        } else {
            formParams = new URLSearchParams();
        }

        if (requestParameters.name !== undefined) {
            formParams.append('name', requestParameters.name as any);
        }

        const response = await this.request({
            path: `/logs/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: formParams,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Update Log
     * updateLog
     */
    async _3ac95b87739c3f60f50f01405bde87ad(requestParameters: 3ac95b87739c3f60f50f01405bde87adRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this._3ac95b87739c3f60f50f01405bde87adRaw(requestParameters, initOverrides);
    }

    /**
     * Get Log
     * getLogItem
     */
    async _4aa2b06765e6a46bfee37102d6810c88Raw(requestParameters: 4aa2b06765e6a46bfee37102d6810c88Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling _4aa2b06765e6a46bfee37102d6810c88.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/logs/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Get Log
     * getLogItem
     */
    async _4aa2b06765e6a46bfee37102d6810c88(requestParameters: 4aa2b06765e6a46bfee37102d6810c88Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this._4aa2b06765e6a46bfee37102d6810c88Raw(requestParameters, initOverrides);
    }

    /**
     * Delete Log
     * deleteLog
     */
    async a8600d888983a5555731f45fa9600ddbRaw(requestParameters: A8600d888983a5555731f45fa9600ddbRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling a8600d888983a5555731f45fa9600ddb.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/logs/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete Log
     * deleteLog
     */
    async a8600d888983a5555731f45fa9600ddb(requestParameters: A8600d888983a5555731f45fa9600ddbRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.a8600d888983a5555731f45fa9600ddbRaw(requestParameters, initOverrides);
    }

    /**
     * Create Log
     * createLog
     */
    async c4d265e8dccd6fd68487c2bfbe5943acRaw(requestParameters: C4d265e8dccd6fd68487c2bfbe5943acRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const consumes: runtime.Consume[] = [
            { contentType: 'application/x-www-form-urlencoded' },
        ];
        // @ts-ignore: canConsumeForm may be unused
        const canConsumeForm = runtime.canConsumeForm(consumes);

        let formParams: { append(param: string, value: any): any };
        let useForm = false;
        if (useForm) {
            formParams = new FormData();
        } else {
            formParams = new URLSearchParams();
        }

        if (requestParameters.name !== undefined) {
            formParams.append('name', requestParameters.name as any);
        }

        const response = await this.request({
            path: `/logs`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: formParams,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Create Log
     * createLog
     */
    async c4d265e8dccd6fd68487c2bfbe5943ac(requestParameters: C4d265e8dccd6fd68487c2bfbe5943acRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.c4d265e8dccd6fd68487c2bfbe5943acRaw(requestParameters, initOverrides);
    }

    /**
     * Get all Logs
     * getLogList
     */
    async f98af73e23990227213ec217d6670d2bRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/logs`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Get all Logs
     * getLogList
     */
    async f98af73e23990227213ec217d6670d2b(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.f98af73e23990227213ec217d6670d2bRaw(initOverrides);
    }

}
