/* tslint:disable */
/* eslint-disable */
/**
 * 
 * 
 *
 * 
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';

export interface 1015f4f6430d718f185eca3cc2423024Request {
    id: number;
    name?: string;
}

export interface 367790b415fe7e968903353e93752d48Request {
    id: number;
}

export interface 8fe91923e4e3c2c8daac2a888c304eebRequest {
    id: number;
}

export interface Dbd8a6874ab9d1cab12748fcf39b8a53Request {
    name?: string;
}

/**
 * 
 */
export class SxgUserApi extends runtime.BaseAPI {

    /**
     * Update SxgUser
     * updateSxgUser
     */
    async _1015f4f6430d718f185eca3cc2423024Raw(requestParameters: 1015f4f6430d718f185eca3cc2423024Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling _1015f4f6430d718f185eca3cc2423024.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const consumes: runtime.Consume[] = [
            { contentType: 'application/x-www-form-urlencoded' },
        ];
        // @ts-ignore: canConsumeForm may be unused
        const canConsumeForm = runtime.canConsumeForm(consumes);

        let formParams: { append(param: string, value: any): any };
        let useForm = false;
        if (useForm) {
            formParams = new FormData();
        } else {
            formParams = new URLSearchParams();
        }

        if (requestParameters.name !== undefined) {
            formParams.append('name', requestParameters.name as any);
        }

        const response = await this.request({
            path: `/sxgUsers/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: formParams,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Update SxgUser
     * updateSxgUser
     */
    async _1015f4f6430d718f185eca3cc2423024(requestParameters: 1015f4f6430d718f185eca3cc2423024Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this._1015f4f6430d718f185eca3cc2423024Raw(requestParameters, initOverrides);
    }

    /**
     * Get SxgUser
     * getSxgUserItem
     */
    async _367790b415fe7e968903353e93752d48Raw(requestParameters: 367790b415fe7e968903353e93752d48Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling _367790b415fe7e968903353e93752d48.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/sxgUsers/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Get SxgUser
     * getSxgUserItem
     */
    async _367790b415fe7e968903353e93752d48(requestParameters: 367790b415fe7e968903353e93752d48Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this._367790b415fe7e968903353e93752d48Raw(requestParameters, initOverrides);
    }

    /**
     * Delete SxgUser
     * deleteSxgUser
     */
    async _8fe91923e4e3c2c8daac2a888c304eebRaw(requestParameters: 8fe91923e4e3c2c8daac2a888c304eebRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling _8fe91923e4e3c2c8daac2a888c304eeb.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/sxgUsers/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete SxgUser
     * deleteSxgUser
     */
    async _8fe91923e4e3c2c8daac2a888c304eeb(requestParameters: 8fe91923e4e3c2c8daac2a888c304eebRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this._8fe91923e4e3c2c8daac2a888c304eebRaw(requestParameters, initOverrides);
    }

    /**
     * Get all SxgUsers
     * getSxgUserList
     */
    async _9b39d49adef3b6e430abac14641a50faRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/sxgUsers`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Get all SxgUsers
     * getSxgUserList
     */
    async _9b39d49adef3b6e430abac14641a50fa(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this._9b39d49adef3b6e430abac14641a50faRaw(initOverrides);
    }

    /**
     * Create SxgUser
     * createSxgUser
     */
    async dbd8a6874ab9d1cab12748fcf39b8a53Raw(requestParameters: Dbd8a6874ab9d1cab12748fcf39b8a53Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const consumes: runtime.Consume[] = [
            { contentType: 'application/x-www-form-urlencoded' },
        ];
        // @ts-ignore: canConsumeForm may be unused
        const canConsumeForm = runtime.canConsumeForm(consumes);

        let formParams: { append(param: string, value: any): any };
        let useForm = false;
        if (useForm) {
            formParams = new FormData();
        } else {
            formParams = new URLSearchParams();
        }

        if (requestParameters.name !== undefined) {
            formParams.append('name', requestParameters.name as any);
        }

        const response = await this.request({
            path: `/sxgUsers`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: formParams,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Create SxgUser
     * createSxgUser
     */
    async dbd8a6874ab9d1cab12748fcf39b8a53(requestParameters: Dbd8a6874ab9d1cab12748fcf39b8a53Request = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.dbd8a6874ab9d1cab12748fcf39b8a53Raw(requestParameters, initOverrides);
    }

}
