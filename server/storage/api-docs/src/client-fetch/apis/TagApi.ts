/* tslint:disable */
/* eslint-disable */
/**
 * 
 * 
 *
 * 
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';

export interface 35978f1f50ee3ef20582e565ac7b6720Request {
    id: number;
}

export interface 3e3cc7bb590b34997dd14f6ca40743f3Request {
    id: number;
    name?: string;
}

export interface 5ac3d7ca53caad3cfe1e4ef1a673ba07Request {
    id: number;
}

export interface C851a6840f9037781df6fcc88bd294e4Request {
    name?: string;
}

/**
 * 
 */
export class TagApi extends runtime.BaseAPI {

    /**
     * Get Tag
     * getTagItem
     */
    async _35978f1f50ee3ef20582e565ac7b6720Raw(requestParameters: 35978f1f50ee3ef20582e565ac7b6720Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling _35978f1f50ee3ef20582e565ac7b6720.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/tags/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Get Tag
     * getTagItem
     */
    async _35978f1f50ee3ef20582e565ac7b6720(requestParameters: 35978f1f50ee3ef20582e565ac7b6720Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this._35978f1f50ee3ef20582e565ac7b6720Raw(requestParameters, initOverrides);
    }

    /**
     * Update Tag
     * updateTag
     */
    async _3e3cc7bb590b34997dd14f6ca40743f3Raw(requestParameters: 3e3cc7bb590b34997dd14f6ca40743f3Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling _3e3cc7bb590b34997dd14f6ca40743f3.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const consumes: runtime.Consume[] = [
            { contentType: 'application/x-www-form-urlencoded' },
        ];
        // @ts-ignore: canConsumeForm may be unused
        const canConsumeForm = runtime.canConsumeForm(consumes);

        let formParams: { append(param: string, value: any): any };
        let useForm = false;
        if (useForm) {
            formParams = new FormData();
        } else {
            formParams = new URLSearchParams();
        }

        if (requestParameters.name !== undefined) {
            formParams.append('name', requestParameters.name as any);
        }

        const response = await this.request({
            path: `/tags/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: formParams,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Update Tag
     * updateTag
     */
    async _3e3cc7bb590b34997dd14f6ca40743f3(requestParameters: 3e3cc7bb590b34997dd14f6ca40743f3Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this._3e3cc7bb590b34997dd14f6ca40743f3Raw(requestParameters, initOverrides);
    }

    /**
     * Get all Tags
     * getTagList
     */
    async _57fc6cc7a88ad83c6888887c40e6094aRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/tags`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Get all Tags
     * getTagList
     */
    async _57fc6cc7a88ad83c6888887c40e6094a(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this._57fc6cc7a88ad83c6888887c40e6094aRaw(initOverrides);
    }

    /**
     * Delete Tag
     * deleteTag
     */
    async _5ac3d7ca53caad3cfe1e4ef1a673ba07Raw(requestParameters: 5ac3d7ca53caad3cfe1e4ef1a673ba07Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling _5ac3d7ca53caad3cfe1e4ef1a673ba07.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/tags/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete Tag
     * deleteTag
     */
    async _5ac3d7ca53caad3cfe1e4ef1a673ba07(requestParameters: 5ac3d7ca53caad3cfe1e4ef1a673ba07Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this._5ac3d7ca53caad3cfe1e4ef1a673ba07Raw(requestParameters, initOverrides);
    }

    /**
     * Create Tag
     * createTag
     */
    async c851a6840f9037781df6fcc88bd294e4Raw(requestParameters: C851a6840f9037781df6fcc88bd294e4Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const consumes: runtime.Consume[] = [
            { contentType: 'application/x-www-form-urlencoded' },
        ];
        // @ts-ignore: canConsumeForm may be unused
        const canConsumeForm = runtime.canConsumeForm(consumes);

        let formParams: { append(param: string, value: any): any };
        let useForm = false;
        if (useForm) {
            formParams = new FormData();
        } else {
            formParams = new URLSearchParams();
        }

        if (requestParameters.name !== undefined) {
            formParams.append('name', requestParameters.name as any);
        }

        const response = await this.request({
            path: `/tags`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: formParams,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Create Tag
     * createTag
     */
    async c851a6840f9037781df6fcc88bd294e4(requestParameters: C851a6840f9037781df6fcc88bd294e4Request = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.c851a6840f9037781df6fcc88bd294e4Raw(requestParameters, initOverrides);
    }

}
