/// <reference path="./custom.d.ts" />
// tslint:disable
/**
 * 
 * 
 *
 * 
 * 
 *
 * NOTE: This file is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the file manually.
 */

import * as url from "url";
import * as isomorphicFetch from "isomorphic-fetch";
import { Configuration } from "./configuration";

const BASE_PATH = "/".replace(/\/+$/, "");

/**
 *
 * @export
 */
export const COLLECTION_FORMATS = {
    csv: ",",
    ssv: " ",
    tsv: "\t",
    pipes: "|",
};

/**
 *
 * @export
 * @interface FetchAPI
 */
export interface FetchAPI {
    (url: string, init?: any): Promise<Response>;
}

/**
 *
 * @export
 * @interface FetchArgs
 */
export interface FetchArgs {
    url: string;
    options: any;
}

/**
 *
 * @export
 * @class BaseAPI
 */
export class BaseAPI {
    protected configuration: Configuration;

    constructor(configuration?: Configuration, protected basePath: string = BASE_PATH, protected fetch: FetchAPI = isomorphicFetch) {
        if (configuration) {
            this.configuration = configuration;
            this.basePath = configuration.basePath || this.basePath;
        }
    }
};

/**
 *
 * @export
 * @class RequiredError
 * @extends {Error}
 */
export class RequiredError extends Error {
    name: "RequiredError"
    constructor(public field: string, msg?: string) {
        super(msg);
    }
}

/**
 * 
 * @export
 * @interface AssetsBody
 */
export interface AssetsBody {
    /**
     * desc
     * @type {string}
     * @memberof AssetsBody
     */
    name?: string;
}
/**
 * 
 * @export
 * @interface AssetsIdBody
 */
export interface AssetsIdBody {
    /**
     * desc
     * @type {string}
     * @memberof AssetsIdBody
     */
    name?: string;
}
/**
 * 
 * @export
 * @interface CaveEntrancesBody
 */
export interface CaveEntrancesBody {
    /**
     * desc
     * @type {string}
     * @memberof CaveEntrancesBody
     */
    name?: string;
}
/**
 * 
 * @export
 * @interface CaveEntrancesIdBody
 */
export interface CaveEntrancesIdBody {
    /**
     * desc
     * @type {string}
     * @memberof CaveEntrancesIdBody
     */
    name?: string;
}
/**
 * 
 * @export
 * @interface CaveTypesBody
 */
export interface CaveTypesBody {
    /**
     * desc
     * @type {string}
     * @memberof CaveTypesBody
     */
    name?: string;
}
/**
 * 
 * @export
 * @interface CaveTypesIdBody
 */
export interface CaveTypesIdBody {
    /**
     * desc
     * @type {string}
     * @memberof CaveTypesIdBody
     */
    name?: string;
}
/**
 * 
 * @export
 * @interface CavesBody
 */
export interface CavesBody {
    /**
     * desc
     * @type {string}
     * @memberof CavesBody
     */
    name?: string;
}
/**
 * 
 * @export
 * @interface CavesIdBody
 */
export interface CavesIdBody {
    /**
     * desc
     * @type {string}
     * @memberof CavesIdBody
     */
    name?: string;
}
/**
 * 
 * @export
 * @interface EntranceTypesBody
 */
export interface EntranceTypesBody {
    /**
     * desc
     * @type {string}
     * @memberof EntranceTypesBody
     */
    name?: string;
}
/**
 * 
 * @export
 * @interface EntranceTypesIdBody
 */
export interface EntranceTypesIdBody {
    /**
     * desc
     * @type {string}
     * @memberof EntranceTypesIdBody
     */
    name?: string;
}
/**
 * 
 * @export
 * @interface FeatureTypesBody
 */
export interface FeatureTypesBody {
    /**
     * desc
     * @type {string}
     * @memberof FeatureTypesBody
     */
    name?: string;
}
/**
 * 
 * @export
 * @interface FeatureTypesIdBody
 */
export interface FeatureTypesIdBody {
    /**
     * desc
     * @type {string}
     * @memberof FeatureTypesIdBody
     */
    name?: string;
}
/**
 * 
 * @export
 * @interface FeaturesBody
 */
export interface FeaturesBody {
    /**
     * desc
     * @type {string}
     * @memberof FeaturesBody
     */
    name?: string;
}
/**
 * 
 * @export
 * @interface FeaturesIdBody
 */
export interface FeaturesIdBody {
    /**
     * desc
     * @type {string}
     * @memberof FeaturesIdBody
     */
    name?: string;
}
/**
 * 
 * @export
 * @interface FilesBody
 */
export interface FilesBody {
    /**
     * desc
     * @type {string}
     * @memberof FilesBody
     */
    name?: string;
}
/**
 * 
 * @export
 * @interface FilesIdBody
 */
export interface FilesIdBody {
    /**
     * desc
     * @type {string}
     * @memberof FilesIdBody
     */
    name?: string;
}
/**
 * 
 * @export
 * @interface GeofilesBody
 */
export interface GeofilesBody {
    /**
     * desc
     * @type {string}
     * @memberof GeofilesBody
     */
    name?: string;
}
/**
 * 
 * @export
 * @interface GeofilesIdBody
 */
export interface GeofilesIdBody {
    /**
     * desc
     * @type {string}
     * @memberof GeofilesIdBody
     */
    name?: string;
}
/**
 * 
 * @export
 * @interface GeoreferencedMapsBody
 */
export interface GeoreferencedMapsBody {
    /**
     * desc
     * @type {string}
     * @memberof GeoreferencedMapsBody
     */
    name?: string;
}
/**
 * 
 * @export
 * @interface GeoreferencedMapsIdBody
 */
export interface GeoreferencedMapsIdBody {
    /**
     * desc
     * @type {string}
     * @memberof GeoreferencedMapsIdBody
     */
    name?: string;
}
/**
 * 
 * @export
 * @interface ImagesBody
 */
export interface ImagesBody {
    /**
     * desc
     * @type {string}
     * @memberof ImagesBody
     */
    name?: string;
}
/**
 * 
 * @export
 * @interface ImagesIdBody
 */
export interface ImagesIdBody {
    /**
     * desc
     * @type {string}
     * @memberof ImagesIdBody
     */
    name?: string;
}
/**
 * 
 * @export
 * @interface LogsBody
 */
export interface LogsBody {
    /**
     * desc
     * @type {string}
     * @memberof LogsBody
     */
    name?: string;
}
/**
 * 
 * @export
 * @interface LogsIdBody
 */
export interface LogsIdBody {
    /**
     * desc
     * @type {string}
     * @memberof LogsIdBody
     */
    name?: string;
}
/**
 * 
 * @export
 * @interface MapViewsBody
 */
export interface MapViewsBody {
    /**
     * desc
     * @type {string}
     * @memberof MapViewsBody
     */
    name?: string;
}
/**
 * 
 * @export
 * @interface MapViewsIdBody
 */
export interface MapViewsIdBody {
    /**
     * desc
     * @type {string}
     * @memberof MapViewsIdBody
     */
    name?: string;
}
/**
 * 
 * @export
 * @interface PointsBody
 */
export interface PointsBody {
    /**
     * desc
     * @type {string}
     * @memberof PointsBody
     */
    name?: string;
}
/**
 * 
 * @export
 * @interface PointsIdBody
 */
export interface PointsIdBody {
    /**
     * desc
     * @type {string}
     * @memberof PointsIdBody
     */
    name?: string;
}
/**
 * 
 * @export
 * @interface SxgUsersBody
 */
export interface SxgUsersBody {
    /**
     * desc
     * @type {string}
     * @memberof SxgUsersBody
     */
    name?: string;
}
/**
 * 
 * @export
 * @interface SxgUsersIdBody
 */
export interface SxgUsersIdBody {
    /**
     * desc
     * @type {string}
     * @memberof SxgUsersIdBody
     */
    name?: string;
}
/**
 * 
 * @export
 * @interface TagsBody
 */
export interface TagsBody {
    /**
     * desc
     * @type {string}
     * @memberof TagsBody
     */
    name?: string;
}
/**
 * 
 * @export
 * @interface TagsIdBody
 */
export interface TagsIdBody {
    /**
     * desc
     * @type {string}
     * @memberof TagsIdBody
     */
    name?: string;
}
/**
 * 
 * @export
 * @interface TeamMembersBody
 */
export interface TeamMembersBody {
    /**
     * desc
     * @type {string}
     * @memberof TeamMembersBody
     */
    name?: string;
}
/**
 * 
 * @export
 * @interface TeamMembersIdBody
 */
export interface TeamMembersIdBody {
    /**
     * desc
     * @type {string}
     * @memberof TeamMembersIdBody
     */
    name?: string;
}
/**
 * 
 * @export
 * @interface TripLogsBody
 */
export interface TripLogsBody {
    /**
     * desc
     * @type {string}
     * @memberof TripLogsBody
     */
    name?: string;
}
/**
 * 
 * @export
 * @interface TripLogsIdBody
 */
export interface TripLogsIdBody {
    /**
     * desc
     * @type {string}
     * @memberof TripLogsIdBody
     */
    name?: string;
}
/**
 * 
 * @export
 * @interface UsersBody
 */
export interface UsersBody {
    /**
     * desc
     * @type {string}
     * @memberof UsersBody
     */
    name?: string;
}
/**
 * 
 * @export
 * @interface UsersIdBody
 */
export interface UsersIdBody {
    /**
     * desc
     * @type {string}
     * @memberof UsersIdBody
     */
    name?: string;
}
/**
 * AssetApi - fetch parameter creator
 * @export
 */
export const AssetApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Get Asset
         * @summary getAssetItem
         * @param {number} id id of Asset
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        3f1618f3ab09735d63c93a014d82c4f2(id: number, options: any = {}): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling 3f1618f3ab09735d63c93a014d82c4f2.');
            }
            const localVarPath = `/assets/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Create Asset
         * @summary createAsset
         * @param {string} name 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        5baf39dba56d410a1bf7eb6c1cfe6507(name: string, options: any = {}): FetchArgs {
            // verify required parameter 'name' is not null or undefined
            if (name === null || name === undefined) {
                throw new RequiredError('name','Required parameter name was null or undefined when calling 5baf39dba56d410a1bf7eb6c1cfe6507.');
            }
            const localVarPath = `/assets`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new url.URLSearchParams();

            if (name !== undefined) {
                localVarFormParams.set('name', name as any);
            }

            localVarHeaderParameter['Content-Type'] = 'application/x-www-form-urlencoded';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            localVarRequestOptions.body = localVarFormParams.toString();

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete Asset
         * @summary deleteAsset
         * @param {number} id id of Asset
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        81e573317d0ccd3a1a3bb21296048765(id: number, options: any = {}): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling 81e573317d0ccd3a1a3bb21296048765.');
            }
            const localVarPath = `/assets/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'DELETE' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update Asset
         * @summary updateAsset
         * @param {string} name 
         * @param {number} id id of Asset
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        abe283cafa8b21156dee4a870c67a59a(name: string, id: number, options: any = {}): FetchArgs {
            // verify required parameter 'name' is not null or undefined
            if (name === null || name === undefined) {
                throw new RequiredError('name','Required parameter name was null or undefined when calling abe283cafa8b21156dee4a870c67a59a.');
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling abe283cafa8b21156dee4a870c67a59a.');
            }
            const localVarPath = `/assets/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'PUT' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new url.URLSearchParams();

            if (name !== undefined) {
                localVarFormParams.set('name', name as any);
            }

            localVarHeaderParameter['Content-Type'] = 'application/x-www-form-urlencoded';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            localVarRequestOptions.body = localVarFormParams.toString();

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get all Assets
         * @summary getAssetList
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bf2ac34b89b5240c36742fc783b640cc(options: any = {}): FetchArgs {
            const localVarPath = `/assets`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AssetApi - functional programming interface
 * @export
 */
export const AssetApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Get Asset
         * @summary getAssetItem
         * @param {number} id id of Asset
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        3f1618f3ab09735d63c93a014d82c4f2(id: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = AssetApiFetchParamCreator(configuration).3f1618f3ab09735d63c93a014d82c4f2(id, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Create Asset
         * @summary createAsset
         * @param {string} name 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        5baf39dba56d410a1bf7eb6c1cfe6507(name: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = AssetApiFetchParamCreator(configuration).5baf39dba56d410a1bf7eb6c1cfe6507(name, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Delete Asset
         * @summary deleteAsset
         * @param {number} id id of Asset
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        81e573317d0ccd3a1a3bb21296048765(id: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = AssetApiFetchParamCreator(configuration).81e573317d0ccd3a1a3bb21296048765(id, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Update Asset
         * @summary updateAsset
         * @param {string} name 
         * @param {number} id id of Asset
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        abe283cafa8b21156dee4a870c67a59a(name: string, id: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = AssetApiFetchParamCreator(configuration).abe283cafa8b21156dee4a870c67a59a(name, id, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Get all Assets
         * @summary getAssetList
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bf2ac34b89b5240c36742fc783b640cc(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = AssetApiFetchParamCreator(configuration).bf2ac34b89b5240c36742fc783b640cc(options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * AssetApi - factory interface
 * @export
 */
export const AssetApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * Get Asset
         * @summary getAssetItem
         * @param {number} id id of Asset
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        3f1618f3ab09735d63c93a014d82c4f2(id: number, options?: any) {
            return AssetApiFp(configuration).3f1618f3ab09735d63c93a014d82c4f2(id, options)(fetch, basePath);
        },
        /**
         * Create Asset
         * @summary createAsset
         * @param {string} name 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        5baf39dba56d410a1bf7eb6c1cfe6507(name: string, options?: any) {
            return AssetApiFp(configuration).5baf39dba56d410a1bf7eb6c1cfe6507(name, options)(fetch, basePath);
        },
        /**
         * Delete Asset
         * @summary deleteAsset
         * @param {number} id id of Asset
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        81e573317d0ccd3a1a3bb21296048765(id: number, options?: any) {
            return AssetApiFp(configuration).81e573317d0ccd3a1a3bb21296048765(id, options)(fetch, basePath);
        },
        /**
         * Update Asset
         * @summary updateAsset
         * @param {string} name 
         * @param {number} id id of Asset
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        abe283cafa8b21156dee4a870c67a59a(name: string, id: number, options?: any) {
            return AssetApiFp(configuration).abe283cafa8b21156dee4a870c67a59a(name, id, options)(fetch, basePath);
        },
        /**
         * Get all Assets
         * @summary getAssetList
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bf2ac34b89b5240c36742fc783b640cc(options?: any) {
            return AssetApiFp(configuration).bf2ac34b89b5240c36742fc783b640cc(options)(fetch, basePath);
        },
    };
};

/**
 * AssetApi - object-oriented interface
 * @export
 * @class AssetApi
 * @extends {BaseAPI}
 */
export class AssetApi extends BaseAPI {
    /**
     * Get Asset
     * @summary getAssetItem
     * @param {number} id id of Asset
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AssetApi
     */
    public 3f1618f3ab09735d63c93a014d82c4f2(id: number, options?: any) {
        return AssetApiFp(this.configuration).3f1618f3ab09735d63c93a014d82c4f2(id, options)(this.fetch, this.basePath);
    }

    /**
     * Create Asset
     * @summary createAsset
     * @param {string} name 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AssetApi
     */
    public 5baf39dba56d410a1bf7eb6c1cfe6507(name: string, options?: any) {
        return AssetApiFp(this.configuration).5baf39dba56d410a1bf7eb6c1cfe6507(name, options)(this.fetch, this.basePath);
    }

    /**
     * Delete Asset
     * @summary deleteAsset
     * @param {number} id id of Asset
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AssetApi
     */
    public 81e573317d0ccd3a1a3bb21296048765(id: number, options?: any) {
        return AssetApiFp(this.configuration).81e573317d0ccd3a1a3bb21296048765(id, options)(this.fetch, this.basePath);
    }

    /**
     * Update Asset
     * @summary updateAsset
     * @param {string} name 
     * @param {number} id id of Asset
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AssetApi
     */
    public abe283cafa8b21156dee4a870c67a59a(name: string, id: number, options?: any) {
        return AssetApiFp(this.configuration).abe283cafa8b21156dee4a870c67a59a(name, id, options)(this.fetch, this.basePath);
    }

    /**
     * Get all Assets
     * @summary getAssetList
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AssetApi
     */
    public bf2ac34b89b5240c36742fc783b640cc(options?: any) {
        return AssetApiFp(this.configuration).bf2ac34b89b5240c36742fc783b640cc(options)(this.fetch, this.basePath);
    }

}
/**
 * CaveApi - fetch parameter creator
 * @export
 */
export const CaveApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Get all Caves
         * @summary getCaveList
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        14757fb12ad2e8397562b4882969690f(options: any = {}): FetchArgs {
            const localVarPath = `/caves`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get Cave
         * @summary getCaveItem
         * @param {number} id id of Cave
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        1c622d9db9c463a33aa532b32f3d23de(id: number, options: any = {}): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling 1c622d9db9c463a33aa532b32f3d23de.');
            }
            const localVarPath = `/caves/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Create Cave
         * @summary createCave
         * @param {string} name 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        577a84bf0de4130a9b10d13f0c622bf1(name: string, options: any = {}): FetchArgs {
            // verify required parameter 'name' is not null or undefined
            if (name === null || name === undefined) {
                throw new RequiredError('name','Required parameter name was null or undefined when calling 577a84bf0de4130a9b10d13f0c622bf1.');
            }
            const localVarPath = `/caves`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new url.URLSearchParams();

            if (name !== undefined) {
                localVarFormParams.set('name', name as any);
            }

            localVarHeaderParameter['Content-Type'] = 'application/x-www-form-urlencoded';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            localVarRequestOptions.body = localVarFormParams.toString();

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update Cave
         * @summary updateCave
         * @param {string} name 
         * @param {number} id id of Cave
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        704e65587b6fff0267744aa4bc2adaba(name: string, id: number, options: any = {}): FetchArgs {
            // verify required parameter 'name' is not null or undefined
            if (name === null || name === undefined) {
                throw new RequiredError('name','Required parameter name was null or undefined when calling 704e65587b6fff0267744aa4bc2adaba.');
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling 704e65587b6fff0267744aa4bc2adaba.');
            }
            const localVarPath = `/caves/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'PUT' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new url.URLSearchParams();

            if (name !== undefined) {
                localVarFormParams.set('name', name as any);
            }

            localVarHeaderParameter['Content-Type'] = 'application/x-www-form-urlencoded';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            localVarRequestOptions.body = localVarFormParams.toString();

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete Cave
         * @summary deleteCave
         * @param {number} id id of Cave
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ea8453b16a586fecc4057c830d319683(id: number, options: any = {}): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling ea8453b16a586fecc4057c830d319683.');
            }
            const localVarPath = `/caves/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'DELETE' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CaveApi - functional programming interface
 * @export
 */
export const CaveApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Get all Caves
         * @summary getCaveList
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        14757fb12ad2e8397562b4882969690f(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = CaveApiFetchParamCreator(configuration).14757fb12ad2e8397562b4882969690f(options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Get Cave
         * @summary getCaveItem
         * @param {number} id id of Cave
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        1c622d9db9c463a33aa532b32f3d23de(id: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = CaveApiFetchParamCreator(configuration).1c622d9db9c463a33aa532b32f3d23de(id, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Create Cave
         * @summary createCave
         * @param {string} name 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        577a84bf0de4130a9b10d13f0c622bf1(name: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = CaveApiFetchParamCreator(configuration).577a84bf0de4130a9b10d13f0c622bf1(name, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Update Cave
         * @summary updateCave
         * @param {string} name 
         * @param {number} id id of Cave
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        704e65587b6fff0267744aa4bc2adaba(name: string, id: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = CaveApiFetchParamCreator(configuration).704e65587b6fff0267744aa4bc2adaba(name, id, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Delete Cave
         * @summary deleteCave
         * @param {number} id id of Cave
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ea8453b16a586fecc4057c830d319683(id: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = CaveApiFetchParamCreator(configuration).ea8453b16a586fecc4057c830d319683(id, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * CaveApi - factory interface
 * @export
 */
export const CaveApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * Get all Caves
         * @summary getCaveList
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        14757fb12ad2e8397562b4882969690f(options?: any) {
            return CaveApiFp(configuration).14757fb12ad2e8397562b4882969690f(options)(fetch, basePath);
        },
        /**
         * Get Cave
         * @summary getCaveItem
         * @param {number} id id of Cave
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        1c622d9db9c463a33aa532b32f3d23de(id: number, options?: any) {
            return CaveApiFp(configuration).1c622d9db9c463a33aa532b32f3d23de(id, options)(fetch, basePath);
        },
        /**
         * Create Cave
         * @summary createCave
         * @param {string} name 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        577a84bf0de4130a9b10d13f0c622bf1(name: string, options?: any) {
            return CaveApiFp(configuration).577a84bf0de4130a9b10d13f0c622bf1(name, options)(fetch, basePath);
        },
        /**
         * Update Cave
         * @summary updateCave
         * @param {string} name 
         * @param {number} id id of Cave
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        704e65587b6fff0267744aa4bc2adaba(name: string, id: number, options?: any) {
            return CaveApiFp(configuration).704e65587b6fff0267744aa4bc2adaba(name, id, options)(fetch, basePath);
        },
        /**
         * Delete Cave
         * @summary deleteCave
         * @param {number} id id of Cave
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ea8453b16a586fecc4057c830d319683(id: number, options?: any) {
            return CaveApiFp(configuration).ea8453b16a586fecc4057c830d319683(id, options)(fetch, basePath);
        },
    };
};

/**
 * CaveApi - object-oriented interface
 * @export
 * @class CaveApi
 * @extends {BaseAPI}
 */
export class CaveApi extends BaseAPI {
    /**
     * Get all Caves
     * @summary getCaveList
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CaveApi
     */
    public 14757fb12ad2e8397562b4882969690f(options?: any) {
        return CaveApiFp(this.configuration).14757fb12ad2e8397562b4882969690f(options)(this.fetch, this.basePath);
    }

    /**
     * Get Cave
     * @summary getCaveItem
     * @param {number} id id of Cave
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CaveApi
     */
    public 1c622d9db9c463a33aa532b32f3d23de(id: number, options?: any) {
        return CaveApiFp(this.configuration).1c622d9db9c463a33aa532b32f3d23de(id, options)(this.fetch, this.basePath);
    }

    /**
     * Create Cave
     * @summary createCave
     * @param {string} name 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CaveApi
     */
    public 577a84bf0de4130a9b10d13f0c622bf1(name: string, options?: any) {
        return CaveApiFp(this.configuration).577a84bf0de4130a9b10d13f0c622bf1(name, options)(this.fetch, this.basePath);
    }

    /**
     * Update Cave
     * @summary updateCave
     * @param {string} name 
     * @param {number} id id of Cave
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CaveApi
     */
    public 704e65587b6fff0267744aa4bc2adaba(name: string, id: number, options?: any) {
        return CaveApiFp(this.configuration).704e65587b6fff0267744aa4bc2adaba(name, id, options)(this.fetch, this.basePath);
    }

    /**
     * Delete Cave
     * @summary deleteCave
     * @param {number} id id of Cave
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CaveApi
     */
    public ea8453b16a586fecc4057c830d319683(id: number, options?: any) {
        return CaveApiFp(this.configuration).ea8453b16a586fecc4057c830d319683(id, options)(this.fetch, this.basePath);
    }

}
/**
 * CaveEntranceApi - fetch parameter creator
 * @export
 */
export const CaveEntranceApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Update CaveEntrance
         * @summary updateCaveEntrance
         * @param {string} name 
         * @param {number} id id of CaveEntrance
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        0b7098a3a4db3f15d66d5d173d9b70b9(name: string, id: number, options: any = {}): FetchArgs {
            // verify required parameter 'name' is not null or undefined
            if (name === null || name === undefined) {
                throw new RequiredError('name','Required parameter name was null or undefined when calling 0b7098a3a4db3f15d66d5d173d9b70b9.');
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling 0b7098a3a4db3f15d66d5d173d9b70b9.');
            }
            const localVarPath = `/caveEntrances/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'PUT' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new url.URLSearchParams();

            if (name !== undefined) {
                localVarFormParams.set('name', name as any);
            }

            localVarHeaderParameter['Content-Type'] = 'application/x-www-form-urlencoded';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            localVarRequestOptions.body = localVarFormParams.toString();

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Create CaveEntrance
         * @summary createCaveEntrance
         * @param {string} name 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        2681ef5be66c133e9568f713e314cff1(name: string, options: any = {}): FetchArgs {
            // verify required parameter 'name' is not null or undefined
            if (name === null || name === undefined) {
                throw new RequiredError('name','Required parameter name was null or undefined when calling 2681ef5be66c133e9568f713e314cff1.');
            }
            const localVarPath = `/caveEntrances`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new url.URLSearchParams();

            if (name !== undefined) {
                localVarFormParams.set('name', name as any);
            }

            localVarHeaderParameter['Content-Type'] = 'application/x-www-form-urlencoded';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            localVarRequestOptions.body = localVarFormParams.toString();

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get CaveEntrance
         * @summary getCaveEntranceItem
         * @param {number} id id of CaveEntrance
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        53a160ba0cab52eadcafc744884ce3b3(id: number, options: any = {}): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling 53a160ba0cab52eadcafc744884ce3b3.');
            }
            const localVarPath = `/caveEntrances/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get all CaveEntrances
         * @summary getCaveEntranceList
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        632f6231938573947ef4f90a83558ae3(options: any = {}): FetchArgs {
            const localVarPath = `/caveEntrances`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete CaveEntrance
         * @summary deleteCaveEntrance
         * @param {number} id id of CaveEntrance
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        9e8ab160c3a28640fafc3953110f313e(id: number, options: any = {}): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling 9e8ab160c3a28640fafc3953110f313e.');
            }
            const localVarPath = `/caveEntrances/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'DELETE' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CaveEntranceApi - functional programming interface
 * @export
 */
export const CaveEntranceApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Update CaveEntrance
         * @summary updateCaveEntrance
         * @param {string} name 
         * @param {number} id id of CaveEntrance
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        0b7098a3a4db3f15d66d5d173d9b70b9(name: string, id: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = CaveEntranceApiFetchParamCreator(configuration).0b7098a3a4db3f15d66d5d173d9b70b9(name, id, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Create CaveEntrance
         * @summary createCaveEntrance
         * @param {string} name 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        2681ef5be66c133e9568f713e314cff1(name: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = CaveEntranceApiFetchParamCreator(configuration).2681ef5be66c133e9568f713e314cff1(name, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Get CaveEntrance
         * @summary getCaveEntranceItem
         * @param {number} id id of CaveEntrance
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        53a160ba0cab52eadcafc744884ce3b3(id: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = CaveEntranceApiFetchParamCreator(configuration).53a160ba0cab52eadcafc744884ce3b3(id, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Get all CaveEntrances
         * @summary getCaveEntranceList
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        632f6231938573947ef4f90a83558ae3(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = CaveEntranceApiFetchParamCreator(configuration).632f6231938573947ef4f90a83558ae3(options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Delete CaveEntrance
         * @summary deleteCaveEntrance
         * @param {number} id id of CaveEntrance
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        9e8ab160c3a28640fafc3953110f313e(id: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = CaveEntranceApiFetchParamCreator(configuration).9e8ab160c3a28640fafc3953110f313e(id, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * CaveEntranceApi - factory interface
 * @export
 */
export const CaveEntranceApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * Update CaveEntrance
         * @summary updateCaveEntrance
         * @param {string} name 
         * @param {number} id id of CaveEntrance
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        0b7098a3a4db3f15d66d5d173d9b70b9(name: string, id: number, options?: any) {
            return CaveEntranceApiFp(configuration).0b7098a3a4db3f15d66d5d173d9b70b9(name, id, options)(fetch, basePath);
        },
        /**
         * Create CaveEntrance
         * @summary createCaveEntrance
         * @param {string} name 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        2681ef5be66c133e9568f713e314cff1(name: string, options?: any) {
            return CaveEntranceApiFp(configuration).2681ef5be66c133e9568f713e314cff1(name, options)(fetch, basePath);
        },
        /**
         * Get CaveEntrance
         * @summary getCaveEntranceItem
         * @param {number} id id of CaveEntrance
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        53a160ba0cab52eadcafc744884ce3b3(id: number, options?: any) {
            return CaveEntranceApiFp(configuration).53a160ba0cab52eadcafc744884ce3b3(id, options)(fetch, basePath);
        },
        /**
         * Get all CaveEntrances
         * @summary getCaveEntranceList
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        632f6231938573947ef4f90a83558ae3(options?: any) {
            return CaveEntranceApiFp(configuration).632f6231938573947ef4f90a83558ae3(options)(fetch, basePath);
        },
        /**
         * Delete CaveEntrance
         * @summary deleteCaveEntrance
         * @param {number} id id of CaveEntrance
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        9e8ab160c3a28640fafc3953110f313e(id: number, options?: any) {
            return CaveEntranceApiFp(configuration).9e8ab160c3a28640fafc3953110f313e(id, options)(fetch, basePath);
        },
    };
};

/**
 * CaveEntranceApi - object-oriented interface
 * @export
 * @class CaveEntranceApi
 * @extends {BaseAPI}
 */
export class CaveEntranceApi extends BaseAPI {
    /**
     * Update CaveEntrance
     * @summary updateCaveEntrance
     * @param {string} name 
     * @param {number} id id of CaveEntrance
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CaveEntranceApi
     */
    public 0b7098a3a4db3f15d66d5d173d9b70b9(name: string, id: number, options?: any) {
        return CaveEntranceApiFp(this.configuration).0b7098a3a4db3f15d66d5d173d9b70b9(name, id, options)(this.fetch, this.basePath);
    }

    /**
     * Create CaveEntrance
     * @summary createCaveEntrance
     * @param {string} name 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CaveEntranceApi
     */
    public 2681ef5be66c133e9568f713e314cff1(name: string, options?: any) {
        return CaveEntranceApiFp(this.configuration).2681ef5be66c133e9568f713e314cff1(name, options)(this.fetch, this.basePath);
    }

    /**
     * Get CaveEntrance
     * @summary getCaveEntranceItem
     * @param {number} id id of CaveEntrance
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CaveEntranceApi
     */
    public 53a160ba0cab52eadcafc744884ce3b3(id: number, options?: any) {
        return CaveEntranceApiFp(this.configuration).53a160ba0cab52eadcafc744884ce3b3(id, options)(this.fetch, this.basePath);
    }

    /**
     * Get all CaveEntrances
     * @summary getCaveEntranceList
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CaveEntranceApi
     */
    public 632f6231938573947ef4f90a83558ae3(options?: any) {
        return CaveEntranceApiFp(this.configuration).632f6231938573947ef4f90a83558ae3(options)(this.fetch, this.basePath);
    }

    /**
     * Delete CaveEntrance
     * @summary deleteCaveEntrance
     * @param {number} id id of CaveEntrance
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CaveEntranceApi
     */
    public 9e8ab160c3a28640fafc3953110f313e(id: number, options?: any) {
        return CaveEntranceApiFp(this.configuration).9e8ab160c3a28640fafc3953110f313e(id, options)(this.fetch, this.basePath);
    }

}
/**
 * CaveTypeApi - fetch parameter creator
 * @export
 */
export const CaveTypeApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Get all CaveTypes
         * @summary getCaveTypeList
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        25165acbf62fa3c489e9491389b227b3(options: any = {}): FetchArgs {
            const localVarPath = `/caveTypes`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update CaveType
         * @summary updateCaveType
         * @param {string} name 
         * @param {number} id id of CaveType
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        32d694f9aceadd67af72aef20ac33467(name: string, id: number, options: any = {}): FetchArgs {
            // verify required parameter 'name' is not null or undefined
            if (name === null || name === undefined) {
                throw new RequiredError('name','Required parameter name was null or undefined when calling 32d694f9aceadd67af72aef20ac33467.');
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling 32d694f9aceadd67af72aef20ac33467.');
            }
            const localVarPath = `/caveTypes/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'PUT' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new url.URLSearchParams();

            if (name !== undefined) {
                localVarFormParams.set('name', name as any);
            }

            localVarHeaderParameter['Content-Type'] = 'application/x-www-form-urlencoded';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            localVarRequestOptions.body = localVarFormParams.toString();

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get CaveType
         * @summary getCaveTypeItem
         * @param {number} id id of CaveType
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        384448f895a8883569eb386b1ee359dc(id: number, options: any = {}): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling 384448f895a8883569eb386b1ee359dc.');
            }
            const localVarPath = `/caveTypes/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Create CaveType
         * @summary createCaveType
         * @param {string} name 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        8aca8360affea531d604a5c03b92f24d(name: string, options: any = {}): FetchArgs {
            // verify required parameter 'name' is not null or undefined
            if (name === null || name === undefined) {
                throw new RequiredError('name','Required parameter name was null or undefined when calling 8aca8360affea531d604a5c03b92f24d.');
            }
            const localVarPath = `/caveTypes`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new url.URLSearchParams();

            if (name !== undefined) {
                localVarFormParams.set('name', name as any);
            }

            localVarHeaderParameter['Content-Type'] = 'application/x-www-form-urlencoded';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            localVarRequestOptions.body = localVarFormParams.toString();

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete CaveType
         * @summary deleteCaveType
         * @param {number} id id of CaveType
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        dc66aac759b9c8cb9d085b553c4a1371(id: number, options: any = {}): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling dc66aac759b9c8cb9d085b553c4a1371.');
            }
            const localVarPath = `/caveTypes/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'DELETE' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CaveTypeApi - functional programming interface
 * @export
 */
export const CaveTypeApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Get all CaveTypes
         * @summary getCaveTypeList
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        25165acbf62fa3c489e9491389b227b3(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = CaveTypeApiFetchParamCreator(configuration).25165acbf62fa3c489e9491389b227b3(options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Update CaveType
         * @summary updateCaveType
         * @param {string} name 
         * @param {number} id id of CaveType
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        32d694f9aceadd67af72aef20ac33467(name: string, id: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = CaveTypeApiFetchParamCreator(configuration).32d694f9aceadd67af72aef20ac33467(name, id, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Get CaveType
         * @summary getCaveTypeItem
         * @param {number} id id of CaveType
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        384448f895a8883569eb386b1ee359dc(id: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = CaveTypeApiFetchParamCreator(configuration).384448f895a8883569eb386b1ee359dc(id, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Create CaveType
         * @summary createCaveType
         * @param {string} name 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        8aca8360affea531d604a5c03b92f24d(name: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = CaveTypeApiFetchParamCreator(configuration).8aca8360affea531d604a5c03b92f24d(name, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Delete CaveType
         * @summary deleteCaveType
         * @param {number} id id of CaveType
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        dc66aac759b9c8cb9d085b553c4a1371(id: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = CaveTypeApiFetchParamCreator(configuration).dc66aac759b9c8cb9d085b553c4a1371(id, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * CaveTypeApi - factory interface
 * @export
 */
export const CaveTypeApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * Get all CaveTypes
         * @summary getCaveTypeList
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        25165acbf62fa3c489e9491389b227b3(options?: any) {
            return CaveTypeApiFp(configuration).25165acbf62fa3c489e9491389b227b3(options)(fetch, basePath);
        },
        /**
         * Update CaveType
         * @summary updateCaveType
         * @param {string} name 
         * @param {number} id id of CaveType
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        32d694f9aceadd67af72aef20ac33467(name: string, id: number, options?: any) {
            return CaveTypeApiFp(configuration).32d694f9aceadd67af72aef20ac33467(name, id, options)(fetch, basePath);
        },
        /**
         * Get CaveType
         * @summary getCaveTypeItem
         * @param {number} id id of CaveType
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        384448f895a8883569eb386b1ee359dc(id: number, options?: any) {
            return CaveTypeApiFp(configuration).384448f895a8883569eb386b1ee359dc(id, options)(fetch, basePath);
        },
        /**
         * Create CaveType
         * @summary createCaveType
         * @param {string} name 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        8aca8360affea531d604a5c03b92f24d(name: string, options?: any) {
            return CaveTypeApiFp(configuration).8aca8360affea531d604a5c03b92f24d(name, options)(fetch, basePath);
        },
        /**
         * Delete CaveType
         * @summary deleteCaveType
         * @param {number} id id of CaveType
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        dc66aac759b9c8cb9d085b553c4a1371(id: number, options?: any) {
            return CaveTypeApiFp(configuration).dc66aac759b9c8cb9d085b553c4a1371(id, options)(fetch, basePath);
        },
    };
};

/**
 * CaveTypeApi - object-oriented interface
 * @export
 * @class CaveTypeApi
 * @extends {BaseAPI}
 */
export class CaveTypeApi extends BaseAPI {
    /**
     * Get all CaveTypes
     * @summary getCaveTypeList
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CaveTypeApi
     */
    public 25165acbf62fa3c489e9491389b227b3(options?: any) {
        return CaveTypeApiFp(this.configuration).25165acbf62fa3c489e9491389b227b3(options)(this.fetch, this.basePath);
    }

    /**
     * Update CaveType
     * @summary updateCaveType
     * @param {string} name 
     * @param {number} id id of CaveType
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CaveTypeApi
     */
    public 32d694f9aceadd67af72aef20ac33467(name: string, id: number, options?: any) {
        return CaveTypeApiFp(this.configuration).32d694f9aceadd67af72aef20ac33467(name, id, options)(this.fetch, this.basePath);
    }

    /**
     * Get CaveType
     * @summary getCaveTypeItem
     * @param {number} id id of CaveType
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CaveTypeApi
     */
    public 384448f895a8883569eb386b1ee359dc(id: number, options?: any) {
        return CaveTypeApiFp(this.configuration).384448f895a8883569eb386b1ee359dc(id, options)(this.fetch, this.basePath);
    }

    /**
     * Create CaveType
     * @summary createCaveType
     * @param {string} name 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CaveTypeApi
     */
    public 8aca8360affea531d604a5c03b92f24d(name: string, options?: any) {
        return CaveTypeApiFp(this.configuration).8aca8360affea531d604a5c03b92f24d(name, options)(this.fetch, this.basePath);
    }

    /**
     * Delete CaveType
     * @summary deleteCaveType
     * @param {number} id id of CaveType
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CaveTypeApi
     */
    public dc66aac759b9c8cb9d085b553c4a1371(id: number, options?: any) {
        return CaveTypeApiFp(this.configuration).dc66aac759b9c8cb9d085b553c4a1371(id, options)(this.fetch, this.basePath);
    }

}
/**
 * EntranceTypeApi - fetch parameter creator
 * @export
 */
export const EntranceTypeApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Get EntranceType
         * @summary getEntranceTypeItem
         * @param {number} id id of EntranceType
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        0f4f2571698f671d4964dbae0cc0bb2e(id: number, options: any = {}): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling 0f4f2571698f671d4964dbae0cc0bb2e.');
            }
            const localVarPath = `/entranceTypes/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Create EntranceType
         * @summary createEntranceType
         * @param {string} name 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        1d29dd792139235db6955b6b998e529c(name: string, options: any = {}): FetchArgs {
            // verify required parameter 'name' is not null or undefined
            if (name === null || name === undefined) {
                throw new RequiredError('name','Required parameter name was null or undefined when calling 1d29dd792139235db6955b6b998e529c.');
            }
            const localVarPath = `/entranceTypes`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new url.URLSearchParams();

            if (name !== undefined) {
                localVarFormParams.set('name', name as any);
            }

            localVarHeaderParameter['Content-Type'] = 'application/x-www-form-urlencoded';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            localVarRequestOptions.body = localVarFormParams.toString();

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update EntranceType
         * @summary updateEntranceType
         * @param {string} name 
         * @param {number} id id of EntranceType
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        3a00d9620c2ef33412466aa18158100b(name: string, id: number, options: any = {}): FetchArgs {
            // verify required parameter 'name' is not null or undefined
            if (name === null || name === undefined) {
                throw new RequiredError('name','Required parameter name was null or undefined when calling 3a00d9620c2ef33412466aa18158100b.');
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling 3a00d9620c2ef33412466aa18158100b.');
            }
            const localVarPath = `/entranceTypes/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'PUT' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new url.URLSearchParams();

            if (name !== undefined) {
                localVarFormParams.set('name', name as any);
            }

            localVarHeaderParameter['Content-Type'] = 'application/x-www-form-urlencoded';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            localVarRequestOptions.body = localVarFormParams.toString();

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete EntranceType
         * @summary deleteEntranceType
         * @param {number} id id of EntranceType
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        70253d281e06166f2d1b6a897694128e(id: number, options: any = {}): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling 70253d281e06166f2d1b6a897694128e.');
            }
            const localVarPath = `/entranceTypes/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'DELETE' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get all EntranceTypes
         * @summary getEntranceTypeList
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        d1ac8dd066753a9268189bef9e8d7516(options: any = {}): FetchArgs {
            const localVarPath = `/entranceTypes`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * EntranceTypeApi - functional programming interface
 * @export
 */
export const EntranceTypeApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Get EntranceType
         * @summary getEntranceTypeItem
         * @param {number} id id of EntranceType
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        0f4f2571698f671d4964dbae0cc0bb2e(id: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = EntranceTypeApiFetchParamCreator(configuration).0f4f2571698f671d4964dbae0cc0bb2e(id, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Create EntranceType
         * @summary createEntranceType
         * @param {string} name 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        1d29dd792139235db6955b6b998e529c(name: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = EntranceTypeApiFetchParamCreator(configuration).1d29dd792139235db6955b6b998e529c(name, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Update EntranceType
         * @summary updateEntranceType
         * @param {string} name 
         * @param {number} id id of EntranceType
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        3a00d9620c2ef33412466aa18158100b(name: string, id: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = EntranceTypeApiFetchParamCreator(configuration).3a00d9620c2ef33412466aa18158100b(name, id, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Delete EntranceType
         * @summary deleteEntranceType
         * @param {number} id id of EntranceType
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        70253d281e06166f2d1b6a897694128e(id: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = EntranceTypeApiFetchParamCreator(configuration).70253d281e06166f2d1b6a897694128e(id, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Get all EntranceTypes
         * @summary getEntranceTypeList
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        d1ac8dd066753a9268189bef9e8d7516(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = EntranceTypeApiFetchParamCreator(configuration).d1ac8dd066753a9268189bef9e8d7516(options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * EntranceTypeApi - factory interface
 * @export
 */
export const EntranceTypeApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * Get EntranceType
         * @summary getEntranceTypeItem
         * @param {number} id id of EntranceType
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        0f4f2571698f671d4964dbae0cc0bb2e(id: number, options?: any) {
            return EntranceTypeApiFp(configuration).0f4f2571698f671d4964dbae0cc0bb2e(id, options)(fetch, basePath);
        },
        /**
         * Create EntranceType
         * @summary createEntranceType
         * @param {string} name 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        1d29dd792139235db6955b6b998e529c(name: string, options?: any) {
            return EntranceTypeApiFp(configuration).1d29dd792139235db6955b6b998e529c(name, options)(fetch, basePath);
        },
        /**
         * Update EntranceType
         * @summary updateEntranceType
         * @param {string} name 
         * @param {number} id id of EntranceType
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        3a00d9620c2ef33412466aa18158100b(name: string, id: number, options?: any) {
            return EntranceTypeApiFp(configuration).3a00d9620c2ef33412466aa18158100b(name, id, options)(fetch, basePath);
        },
        /**
         * Delete EntranceType
         * @summary deleteEntranceType
         * @param {number} id id of EntranceType
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        70253d281e06166f2d1b6a897694128e(id: number, options?: any) {
            return EntranceTypeApiFp(configuration).70253d281e06166f2d1b6a897694128e(id, options)(fetch, basePath);
        },
        /**
         * Get all EntranceTypes
         * @summary getEntranceTypeList
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        d1ac8dd066753a9268189bef9e8d7516(options?: any) {
            return EntranceTypeApiFp(configuration).d1ac8dd066753a9268189bef9e8d7516(options)(fetch, basePath);
        },
    };
};

/**
 * EntranceTypeApi - object-oriented interface
 * @export
 * @class EntranceTypeApi
 * @extends {BaseAPI}
 */
export class EntranceTypeApi extends BaseAPI {
    /**
     * Get EntranceType
     * @summary getEntranceTypeItem
     * @param {number} id id of EntranceType
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntranceTypeApi
     */
    public 0f4f2571698f671d4964dbae0cc0bb2e(id: number, options?: any) {
        return EntranceTypeApiFp(this.configuration).0f4f2571698f671d4964dbae0cc0bb2e(id, options)(this.fetch, this.basePath);
    }

    /**
     * Create EntranceType
     * @summary createEntranceType
     * @param {string} name 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntranceTypeApi
     */
    public 1d29dd792139235db6955b6b998e529c(name: string, options?: any) {
        return EntranceTypeApiFp(this.configuration).1d29dd792139235db6955b6b998e529c(name, options)(this.fetch, this.basePath);
    }

    /**
     * Update EntranceType
     * @summary updateEntranceType
     * @param {string} name 
     * @param {number} id id of EntranceType
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntranceTypeApi
     */
    public 3a00d9620c2ef33412466aa18158100b(name: string, id: number, options?: any) {
        return EntranceTypeApiFp(this.configuration).3a00d9620c2ef33412466aa18158100b(name, id, options)(this.fetch, this.basePath);
    }

    /**
     * Delete EntranceType
     * @summary deleteEntranceType
     * @param {number} id id of EntranceType
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntranceTypeApi
     */
    public 70253d281e06166f2d1b6a897694128e(id: number, options?: any) {
        return EntranceTypeApiFp(this.configuration).70253d281e06166f2d1b6a897694128e(id, options)(this.fetch, this.basePath);
    }

    /**
     * Get all EntranceTypes
     * @summary getEntranceTypeList
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntranceTypeApi
     */
    public d1ac8dd066753a9268189bef9e8d7516(options?: any) {
        return EntranceTypeApiFp(this.configuration).d1ac8dd066753a9268189bef9e8d7516(options)(this.fetch, this.basePath);
    }

}
/**
 * FeatureApi - fetch parameter creator
 * @export
 */
export const FeatureApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Create Feature
         * @summary createFeature
         * @param {string} name 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        0046884845bd07f1b308a84ee5c78a43(name: string, options: any = {}): FetchArgs {
            // verify required parameter 'name' is not null or undefined
            if (name === null || name === undefined) {
                throw new RequiredError('name','Required parameter name was null or undefined when calling 0046884845bd07f1b308a84ee5c78a43.');
            }
            const localVarPath = `/features`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new url.URLSearchParams();

            if (name !== undefined) {
                localVarFormParams.set('name', name as any);
            }

            localVarHeaderParameter['Content-Type'] = 'application/x-www-form-urlencoded';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            localVarRequestOptions.body = localVarFormParams.toString();

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get all Features
         * @summary getFeatureList
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        9521496ff8ea68c45217ad52ca6dd01d(options: any = {}): FetchArgs {
            const localVarPath = `/features`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete Feature
         * @summary deleteFeature
         * @param {number} id id of Feature
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        9ffd305291fd52a23ff9cd5990ef3848(id: number, options: any = {}): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling 9ffd305291fd52a23ff9cd5990ef3848.');
            }
            const localVarPath = `/features/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'DELETE' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update Feature
         * @summary updateFeature
         * @param {string} name 
         * @param {number} id id of Feature
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bb5a9e8f110f4c16c1f1f0ad114a8469(name: string, id: number, options: any = {}): FetchArgs {
            // verify required parameter 'name' is not null or undefined
            if (name === null || name === undefined) {
                throw new RequiredError('name','Required parameter name was null or undefined when calling bb5a9e8f110f4c16c1f1f0ad114a8469.');
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling bb5a9e8f110f4c16c1f1f0ad114a8469.');
            }
            const localVarPath = `/features/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'PUT' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new url.URLSearchParams();

            if (name !== undefined) {
                localVarFormParams.set('name', name as any);
            }

            localVarHeaderParameter['Content-Type'] = 'application/x-www-form-urlencoded';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            localVarRequestOptions.body = localVarFormParams.toString();

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get Feature
         * @summary getFeatureItem
         * @param {number} id id of Feature
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        d55d325b3f4a902ddddb46d59b3f43f3(id: number, options: any = {}): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling d55d325b3f4a902ddddb46d59b3f43f3.');
            }
            const localVarPath = `/features/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * FeatureApi - functional programming interface
 * @export
 */
export const FeatureApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Create Feature
         * @summary createFeature
         * @param {string} name 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        0046884845bd07f1b308a84ee5c78a43(name: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = FeatureApiFetchParamCreator(configuration).0046884845bd07f1b308a84ee5c78a43(name, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Get all Features
         * @summary getFeatureList
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        9521496ff8ea68c45217ad52ca6dd01d(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = FeatureApiFetchParamCreator(configuration).9521496ff8ea68c45217ad52ca6dd01d(options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Delete Feature
         * @summary deleteFeature
         * @param {number} id id of Feature
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        9ffd305291fd52a23ff9cd5990ef3848(id: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = FeatureApiFetchParamCreator(configuration).9ffd305291fd52a23ff9cd5990ef3848(id, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Update Feature
         * @summary updateFeature
         * @param {string} name 
         * @param {number} id id of Feature
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bb5a9e8f110f4c16c1f1f0ad114a8469(name: string, id: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = FeatureApiFetchParamCreator(configuration).bb5a9e8f110f4c16c1f1f0ad114a8469(name, id, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Get Feature
         * @summary getFeatureItem
         * @param {number} id id of Feature
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        d55d325b3f4a902ddddb46d59b3f43f3(id: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = FeatureApiFetchParamCreator(configuration).d55d325b3f4a902ddddb46d59b3f43f3(id, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * FeatureApi - factory interface
 * @export
 */
export const FeatureApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * Create Feature
         * @summary createFeature
         * @param {string} name 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        0046884845bd07f1b308a84ee5c78a43(name: string, options?: any) {
            return FeatureApiFp(configuration).0046884845bd07f1b308a84ee5c78a43(name, options)(fetch, basePath);
        },
        /**
         * Get all Features
         * @summary getFeatureList
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        9521496ff8ea68c45217ad52ca6dd01d(options?: any) {
            return FeatureApiFp(configuration).9521496ff8ea68c45217ad52ca6dd01d(options)(fetch, basePath);
        },
        /**
         * Delete Feature
         * @summary deleteFeature
         * @param {number} id id of Feature
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        9ffd305291fd52a23ff9cd5990ef3848(id: number, options?: any) {
            return FeatureApiFp(configuration).9ffd305291fd52a23ff9cd5990ef3848(id, options)(fetch, basePath);
        },
        /**
         * Update Feature
         * @summary updateFeature
         * @param {string} name 
         * @param {number} id id of Feature
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bb5a9e8f110f4c16c1f1f0ad114a8469(name: string, id: number, options?: any) {
            return FeatureApiFp(configuration).bb5a9e8f110f4c16c1f1f0ad114a8469(name, id, options)(fetch, basePath);
        },
        /**
         * Get Feature
         * @summary getFeatureItem
         * @param {number} id id of Feature
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        d55d325b3f4a902ddddb46d59b3f43f3(id: number, options?: any) {
            return FeatureApiFp(configuration).d55d325b3f4a902ddddb46d59b3f43f3(id, options)(fetch, basePath);
        },
    };
};

/**
 * FeatureApi - object-oriented interface
 * @export
 * @class FeatureApi
 * @extends {BaseAPI}
 */
export class FeatureApi extends BaseAPI {
    /**
     * Create Feature
     * @summary createFeature
     * @param {string} name 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FeatureApi
     */
    public 0046884845bd07f1b308a84ee5c78a43(name: string, options?: any) {
        return FeatureApiFp(this.configuration).0046884845bd07f1b308a84ee5c78a43(name, options)(this.fetch, this.basePath);
    }

    /**
     * Get all Features
     * @summary getFeatureList
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FeatureApi
     */
    public 9521496ff8ea68c45217ad52ca6dd01d(options?: any) {
        return FeatureApiFp(this.configuration).9521496ff8ea68c45217ad52ca6dd01d(options)(this.fetch, this.basePath);
    }

    /**
     * Delete Feature
     * @summary deleteFeature
     * @param {number} id id of Feature
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FeatureApi
     */
    public 9ffd305291fd52a23ff9cd5990ef3848(id: number, options?: any) {
        return FeatureApiFp(this.configuration).9ffd305291fd52a23ff9cd5990ef3848(id, options)(this.fetch, this.basePath);
    }

    /**
     * Update Feature
     * @summary updateFeature
     * @param {string} name 
     * @param {number} id id of Feature
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FeatureApi
     */
    public bb5a9e8f110f4c16c1f1f0ad114a8469(name: string, id: number, options?: any) {
        return FeatureApiFp(this.configuration).bb5a9e8f110f4c16c1f1f0ad114a8469(name, id, options)(this.fetch, this.basePath);
    }

    /**
     * Get Feature
     * @summary getFeatureItem
     * @param {number} id id of Feature
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FeatureApi
     */
    public d55d325b3f4a902ddddb46d59b3f43f3(id: number, options?: any) {
        return FeatureApiFp(this.configuration).d55d325b3f4a902ddddb46d59b3f43f3(id, options)(this.fetch, this.basePath);
    }

}
/**
 * FeatureTypeApi - fetch parameter creator
 * @export
 */
export const FeatureTypeApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Get FeatureType
         * @summary getFeatureTypeItem
         * @param {number} id id of FeatureType
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        9b2c3c9068d68c1aead0b780d2a84df4(id: number, options: any = {}): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling 9b2c3c9068d68c1aead0b780d2a84df4.');
            }
            const localVarPath = `/featureTypes/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Create FeatureType
         * @summary createFeatureType
         * @param {string} name 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        b79f907f629f9a57359460592e651c83(name: string, options: any = {}): FetchArgs {
            // verify required parameter 'name' is not null or undefined
            if (name === null || name === undefined) {
                throw new RequiredError('name','Required parameter name was null or undefined when calling b79f907f629f9a57359460592e651c83.');
            }
            const localVarPath = `/featureTypes`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new url.URLSearchParams();

            if (name !== undefined) {
                localVarFormParams.set('name', name as any);
            }

            localVarHeaderParameter['Content-Type'] = 'application/x-www-form-urlencoded';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            localVarRequestOptions.body = localVarFormParams.toString();

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get all FeatureTypes
         * @summary getFeatureTypeList
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ca224d295015eea907de4ffb54c20ec5(options: any = {}): FetchArgs {
            const localVarPath = `/featureTypes`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update FeatureType
         * @summary updateFeatureType
         * @param {string} name 
         * @param {number} id id of FeatureType
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        e0aedf41c24fab81d1267a77a1d5c4cf(name: string, id: number, options: any = {}): FetchArgs {
            // verify required parameter 'name' is not null or undefined
            if (name === null || name === undefined) {
                throw new RequiredError('name','Required parameter name was null or undefined when calling e0aedf41c24fab81d1267a77a1d5c4cf.');
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling e0aedf41c24fab81d1267a77a1d5c4cf.');
            }
            const localVarPath = `/featureTypes/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'PUT' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new url.URLSearchParams();

            if (name !== undefined) {
                localVarFormParams.set('name', name as any);
            }

            localVarHeaderParameter['Content-Type'] = 'application/x-www-form-urlencoded';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            localVarRequestOptions.body = localVarFormParams.toString();

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete FeatureType
         * @summary deleteFeatureType
         * @param {number} id id of FeatureType
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        f7d2397b4f108ed49cf6c35919cf9774(id: number, options: any = {}): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling f7d2397b4f108ed49cf6c35919cf9774.');
            }
            const localVarPath = `/featureTypes/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'DELETE' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * FeatureTypeApi - functional programming interface
 * @export
 */
export const FeatureTypeApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Get FeatureType
         * @summary getFeatureTypeItem
         * @param {number} id id of FeatureType
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        9b2c3c9068d68c1aead0b780d2a84df4(id: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = FeatureTypeApiFetchParamCreator(configuration).9b2c3c9068d68c1aead0b780d2a84df4(id, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Create FeatureType
         * @summary createFeatureType
         * @param {string} name 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        b79f907f629f9a57359460592e651c83(name: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = FeatureTypeApiFetchParamCreator(configuration).b79f907f629f9a57359460592e651c83(name, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Get all FeatureTypes
         * @summary getFeatureTypeList
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ca224d295015eea907de4ffb54c20ec5(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = FeatureTypeApiFetchParamCreator(configuration).ca224d295015eea907de4ffb54c20ec5(options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Update FeatureType
         * @summary updateFeatureType
         * @param {string} name 
         * @param {number} id id of FeatureType
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        e0aedf41c24fab81d1267a77a1d5c4cf(name: string, id: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = FeatureTypeApiFetchParamCreator(configuration).e0aedf41c24fab81d1267a77a1d5c4cf(name, id, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Delete FeatureType
         * @summary deleteFeatureType
         * @param {number} id id of FeatureType
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        f7d2397b4f108ed49cf6c35919cf9774(id: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = FeatureTypeApiFetchParamCreator(configuration).f7d2397b4f108ed49cf6c35919cf9774(id, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * FeatureTypeApi - factory interface
 * @export
 */
export const FeatureTypeApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * Get FeatureType
         * @summary getFeatureTypeItem
         * @param {number} id id of FeatureType
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        9b2c3c9068d68c1aead0b780d2a84df4(id: number, options?: any) {
            return FeatureTypeApiFp(configuration).9b2c3c9068d68c1aead0b780d2a84df4(id, options)(fetch, basePath);
        },
        /**
         * Create FeatureType
         * @summary createFeatureType
         * @param {string} name 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        b79f907f629f9a57359460592e651c83(name: string, options?: any) {
            return FeatureTypeApiFp(configuration).b79f907f629f9a57359460592e651c83(name, options)(fetch, basePath);
        },
        /**
         * Get all FeatureTypes
         * @summary getFeatureTypeList
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ca224d295015eea907de4ffb54c20ec5(options?: any) {
            return FeatureTypeApiFp(configuration).ca224d295015eea907de4ffb54c20ec5(options)(fetch, basePath);
        },
        /**
         * Update FeatureType
         * @summary updateFeatureType
         * @param {string} name 
         * @param {number} id id of FeatureType
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        e0aedf41c24fab81d1267a77a1d5c4cf(name: string, id: number, options?: any) {
            return FeatureTypeApiFp(configuration).e0aedf41c24fab81d1267a77a1d5c4cf(name, id, options)(fetch, basePath);
        },
        /**
         * Delete FeatureType
         * @summary deleteFeatureType
         * @param {number} id id of FeatureType
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        f7d2397b4f108ed49cf6c35919cf9774(id: number, options?: any) {
            return FeatureTypeApiFp(configuration).f7d2397b4f108ed49cf6c35919cf9774(id, options)(fetch, basePath);
        },
    };
};

/**
 * FeatureTypeApi - object-oriented interface
 * @export
 * @class FeatureTypeApi
 * @extends {BaseAPI}
 */
export class FeatureTypeApi extends BaseAPI {
    /**
     * Get FeatureType
     * @summary getFeatureTypeItem
     * @param {number} id id of FeatureType
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FeatureTypeApi
     */
    public 9b2c3c9068d68c1aead0b780d2a84df4(id: number, options?: any) {
        return FeatureTypeApiFp(this.configuration).9b2c3c9068d68c1aead0b780d2a84df4(id, options)(this.fetch, this.basePath);
    }

    /**
     * Create FeatureType
     * @summary createFeatureType
     * @param {string} name 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FeatureTypeApi
     */
    public b79f907f629f9a57359460592e651c83(name: string, options?: any) {
        return FeatureTypeApiFp(this.configuration).b79f907f629f9a57359460592e651c83(name, options)(this.fetch, this.basePath);
    }

    /**
     * Get all FeatureTypes
     * @summary getFeatureTypeList
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FeatureTypeApi
     */
    public ca224d295015eea907de4ffb54c20ec5(options?: any) {
        return FeatureTypeApiFp(this.configuration).ca224d295015eea907de4ffb54c20ec5(options)(this.fetch, this.basePath);
    }

    /**
     * Update FeatureType
     * @summary updateFeatureType
     * @param {string} name 
     * @param {number} id id of FeatureType
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FeatureTypeApi
     */
    public e0aedf41c24fab81d1267a77a1d5c4cf(name: string, id: number, options?: any) {
        return FeatureTypeApiFp(this.configuration).e0aedf41c24fab81d1267a77a1d5c4cf(name, id, options)(this.fetch, this.basePath);
    }

    /**
     * Delete FeatureType
     * @summary deleteFeatureType
     * @param {number} id id of FeatureType
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FeatureTypeApi
     */
    public f7d2397b4f108ed49cf6c35919cf9774(id: number, options?: any) {
        return FeatureTypeApiFp(this.configuration).f7d2397b4f108ed49cf6c35919cf9774(id, options)(this.fetch, this.basePath);
    }

}
/**
 * FileApi - fetch parameter creator
 * @export
 */
export const FileApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Get all Files
         * @summary getFileList
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        22fbfeda8d53a88acbdbe16ab3e86b8f(options: any = {}): FetchArgs {
            const localVarPath = `/files`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update File
         * @summary updateFile
         * @param {string} name 
         * @param {number} id id of File
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        3dc956fb0ff8265eb54d1a6d37cd98f5(name: string, id: number, options: any = {}): FetchArgs {
            // verify required parameter 'name' is not null or undefined
            if (name === null || name === undefined) {
                throw new RequiredError('name','Required parameter name was null or undefined when calling 3dc956fb0ff8265eb54d1a6d37cd98f5.');
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling 3dc956fb0ff8265eb54d1a6d37cd98f5.');
            }
            const localVarPath = `/files/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'PUT' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new url.URLSearchParams();

            if (name !== undefined) {
                localVarFormParams.set('name', name as any);
            }

            localVarHeaderParameter['Content-Type'] = 'application/x-www-form-urlencoded';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            localVarRequestOptions.body = localVarFormParams.toString();

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Create File
         * @summary createFile
         * @param {string} name 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        b17ec9ec45bbc639e95da6411336384b(name: string, options: any = {}): FetchArgs {
            // verify required parameter 'name' is not null or undefined
            if (name === null || name === undefined) {
                throw new RequiredError('name','Required parameter name was null or undefined when calling b17ec9ec45bbc639e95da6411336384b.');
            }
            const localVarPath = `/files`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new url.URLSearchParams();

            if (name !== undefined) {
                localVarFormParams.set('name', name as any);
            }

            localVarHeaderParameter['Content-Type'] = 'application/x-www-form-urlencoded';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            localVarRequestOptions.body = localVarFormParams.toString();

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get File
         * @summary getFileItem
         * @param {number} id id of File
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        d20b3d23666dc5faa14e9240433e2e86(id: number, options: any = {}): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling d20b3d23666dc5faa14e9240433e2e86.');
            }
            const localVarPath = `/files/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete File
         * @summary deleteFile
         * @param {number} id id of File
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fb6ff65241b7d3313109e3ffa0fe0b8a(id: number, options: any = {}): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling fb6ff65241b7d3313109e3ffa0fe0b8a.');
            }
            const localVarPath = `/files/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'DELETE' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * FileApi - functional programming interface
 * @export
 */
export const FileApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Get all Files
         * @summary getFileList
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        22fbfeda8d53a88acbdbe16ab3e86b8f(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = FileApiFetchParamCreator(configuration).22fbfeda8d53a88acbdbe16ab3e86b8f(options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Update File
         * @summary updateFile
         * @param {string} name 
         * @param {number} id id of File
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        3dc956fb0ff8265eb54d1a6d37cd98f5(name: string, id: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = FileApiFetchParamCreator(configuration).3dc956fb0ff8265eb54d1a6d37cd98f5(name, id, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Create File
         * @summary createFile
         * @param {string} name 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        b17ec9ec45bbc639e95da6411336384b(name: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = FileApiFetchParamCreator(configuration).b17ec9ec45bbc639e95da6411336384b(name, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Get File
         * @summary getFileItem
         * @param {number} id id of File
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        d20b3d23666dc5faa14e9240433e2e86(id: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = FileApiFetchParamCreator(configuration).d20b3d23666dc5faa14e9240433e2e86(id, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Delete File
         * @summary deleteFile
         * @param {number} id id of File
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fb6ff65241b7d3313109e3ffa0fe0b8a(id: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = FileApiFetchParamCreator(configuration).fb6ff65241b7d3313109e3ffa0fe0b8a(id, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * FileApi - factory interface
 * @export
 */
export const FileApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * Get all Files
         * @summary getFileList
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        22fbfeda8d53a88acbdbe16ab3e86b8f(options?: any) {
            return FileApiFp(configuration).22fbfeda8d53a88acbdbe16ab3e86b8f(options)(fetch, basePath);
        },
        /**
         * Update File
         * @summary updateFile
         * @param {string} name 
         * @param {number} id id of File
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        3dc956fb0ff8265eb54d1a6d37cd98f5(name: string, id: number, options?: any) {
            return FileApiFp(configuration).3dc956fb0ff8265eb54d1a6d37cd98f5(name, id, options)(fetch, basePath);
        },
        /**
         * Create File
         * @summary createFile
         * @param {string} name 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        b17ec9ec45bbc639e95da6411336384b(name: string, options?: any) {
            return FileApiFp(configuration).b17ec9ec45bbc639e95da6411336384b(name, options)(fetch, basePath);
        },
        /**
         * Get File
         * @summary getFileItem
         * @param {number} id id of File
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        d20b3d23666dc5faa14e9240433e2e86(id: number, options?: any) {
            return FileApiFp(configuration).d20b3d23666dc5faa14e9240433e2e86(id, options)(fetch, basePath);
        },
        /**
         * Delete File
         * @summary deleteFile
         * @param {number} id id of File
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fb6ff65241b7d3313109e3ffa0fe0b8a(id: number, options?: any) {
            return FileApiFp(configuration).fb6ff65241b7d3313109e3ffa0fe0b8a(id, options)(fetch, basePath);
        },
    };
};

/**
 * FileApi - object-oriented interface
 * @export
 * @class FileApi
 * @extends {BaseAPI}
 */
export class FileApi extends BaseAPI {
    /**
     * Get all Files
     * @summary getFileList
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FileApi
     */
    public 22fbfeda8d53a88acbdbe16ab3e86b8f(options?: any) {
        return FileApiFp(this.configuration).22fbfeda8d53a88acbdbe16ab3e86b8f(options)(this.fetch, this.basePath);
    }

    /**
     * Update File
     * @summary updateFile
     * @param {string} name 
     * @param {number} id id of File
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FileApi
     */
    public 3dc956fb0ff8265eb54d1a6d37cd98f5(name: string, id: number, options?: any) {
        return FileApiFp(this.configuration).3dc956fb0ff8265eb54d1a6d37cd98f5(name, id, options)(this.fetch, this.basePath);
    }

    /**
     * Create File
     * @summary createFile
     * @param {string} name 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FileApi
     */
    public b17ec9ec45bbc639e95da6411336384b(name: string, options?: any) {
        return FileApiFp(this.configuration).b17ec9ec45bbc639e95da6411336384b(name, options)(this.fetch, this.basePath);
    }

    /**
     * Get File
     * @summary getFileItem
     * @param {number} id id of File
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FileApi
     */
    public d20b3d23666dc5faa14e9240433e2e86(id: number, options?: any) {
        return FileApiFp(this.configuration).d20b3d23666dc5faa14e9240433e2e86(id, options)(this.fetch, this.basePath);
    }

    /**
     * Delete File
     * @summary deleteFile
     * @param {number} id id of File
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FileApi
     */
    public fb6ff65241b7d3313109e3ffa0fe0b8a(id: number, options?: any) {
        return FileApiFp(this.configuration).fb6ff65241b7d3313109e3ffa0fe0b8a(id, options)(this.fetch, this.basePath);
    }

}
/**
 * GeofileApi - fetch parameter creator
 * @export
 */
export const GeofileApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Delete Geofile
         * @summary deleteGeofile
         * @param {number} id id of Geofile
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        0141b5c135ccd51a7fafb9a7c20f71b9(id: number, options: any = {}): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling 0141b5c135ccd51a7fafb9a7c20f71b9.');
            }
            const localVarPath = `/geofiles/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'DELETE' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Create Geofile
         * @summary createGeofile
         * @param {string} name 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        25839bb1394106bf96af8dcddffa540d(name: string, options: any = {}): FetchArgs {
            // verify required parameter 'name' is not null or undefined
            if (name === null || name === undefined) {
                throw new RequiredError('name','Required parameter name was null or undefined when calling 25839bb1394106bf96af8dcddffa540d.');
            }
            const localVarPath = `/geofiles`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new url.URLSearchParams();

            if (name !== undefined) {
                localVarFormParams.set('name', name as any);
            }

            localVarHeaderParameter['Content-Type'] = 'application/x-www-form-urlencoded';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            localVarRequestOptions.body = localVarFormParams.toString();

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update Geofile
         * @summary updateGeofile
         * @param {string} name 
         * @param {number} id id of Geofile
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        56bd25e41f984f40623f142b39f5e827(name: string, id: number, options: any = {}): FetchArgs {
            // verify required parameter 'name' is not null or undefined
            if (name === null || name === undefined) {
                throw new RequiredError('name','Required parameter name was null or undefined when calling 56bd25e41f984f40623f142b39f5e827.');
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling 56bd25e41f984f40623f142b39f5e827.');
            }
            const localVarPath = `/geofiles/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'PUT' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new url.URLSearchParams();

            if (name !== undefined) {
                localVarFormParams.set('name', name as any);
            }

            localVarHeaderParameter['Content-Type'] = 'application/x-www-form-urlencoded';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            localVarRequestOptions.body = localVarFormParams.toString();

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get all Geofiles
         * @summary getGeofileList
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        5bb6226b9c5373a0798ea335b8620269(options: any = {}): FetchArgs {
            const localVarPath = `/geofiles`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get Geofile
         * @summary getGeofileItem
         * @param {number} id id of Geofile
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        7926eea4a2535dbf125e3f0c7b01c0d5(id: number, options: any = {}): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling 7926eea4a2535dbf125e3f0c7b01c0d5.');
            }
            const localVarPath = `/geofiles/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * GeofileApi - functional programming interface
 * @export
 */
export const GeofileApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Delete Geofile
         * @summary deleteGeofile
         * @param {number} id id of Geofile
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        0141b5c135ccd51a7fafb9a7c20f71b9(id: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = GeofileApiFetchParamCreator(configuration).0141b5c135ccd51a7fafb9a7c20f71b9(id, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Create Geofile
         * @summary createGeofile
         * @param {string} name 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        25839bb1394106bf96af8dcddffa540d(name: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = GeofileApiFetchParamCreator(configuration).25839bb1394106bf96af8dcddffa540d(name, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Update Geofile
         * @summary updateGeofile
         * @param {string} name 
         * @param {number} id id of Geofile
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        56bd25e41f984f40623f142b39f5e827(name: string, id: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = GeofileApiFetchParamCreator(configuration).56bd25e41f984f40623f142b39f5e827(name, id, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Get all Geofiles
         * @summary getGeofileList
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        5bb6226b9c5373a0798ea335b8620269(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = GeofileApiFetchParamCreator(configuration).5bb6226b9c5373a0798ea335b8620269(options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Get Geofile
         * @summary getGeofileItem
         * @param {number} id id of Geofile
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        7926eea4a2535dbf125e3f0c7b01c0d5(id: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = GeofileApiFetchParamCreator(configuration).7926eea4a2535dbf125e3f0c7b01c0d5(id, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * GeofileApi - factory interface
 * @export
 */
export const GeofileApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * Delete Geofile
         * @summary deleteGeofile
         * @param {number} id id of Geofile
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        0141b5c135ccd51a7fafb9a7c20f71b9(id: number, options?: any) {
            return GeofileApiFp(configuration).0141b5c135ccd51a7fafb9a7c20f71b9(id, options)(fetch, basePath);
        },
        /**
         * Create Geofile
         * @summary createGeofile
         * @param {string} name 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        25839bb1394106bf96af8dcddffa540d(name: string, options?: any) {
            return GeofileApiFp(configuration).25839bb1394106bf96af8dcddffa540d(name, options)(fetch, basePath);
        },
        /**
         * Update Geofile
         * @summary updateGeofile
         * @param {string} name 
         * @param {number} id id of Geofile
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        56bd25e41f984f40623f142b39f5e827(name: string, id: number, options?: any) {
            return GeofileApiFp(configuration).56bd25e41f984f40623f142b39f5e827(name, id, options)(fetch, basePath);
        },
        /**
         * Get all Geofiles
         * @summary getGeofileList
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        5bb6226b9c5373a0798ea335b8620269(options?: any) {
            return GeofileApiFp(configuration).5bb6226b9c5373a0798ea335b8620269(options)(fetch, basePath);
        },
        /**
         * Get Geofile
         * @summary getGeofileItem
         * @param {number} id id of Geofile
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        7926eea4a2535dbf125e3f0c7b01c0d5(id: number, options?: any) {
            return GeofileApiFp(configuration).7926eea4a2535dbf125e3f0c7b01c0d5(id, options)(fetch, basePath);
        },
    };
};

/**
 * GeofileApi - object-oriented interface
 * @export
 * @class GeofileApi
 * @extends {BaseAPI}
 */
export class GeofileApi extends BaseAPI {
    /**
     * Delete Geofile
     * @summary deleteGeofile
     * @param {number} id id of Geofile
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GeofileApi
     */
    public 0141b5c135ccd51a7fafb9a7c20f71b9(id: number, options?: any) {
        return GeofileApiFp(this.configuration).0141b5c135ccd51a7fafb9a7c20f71b9(id, options)(this.fetch, this.basePath);
    }

    /**
     * Create Geofile
     * @summary createGeofile
     * @param {string} name 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GeofileApi
     */
    public 25839bb1394106bf96af8dcddffa540d(name: string, options?: any) {
        return GeofileApiFp(this.configuration).25839bb1394106bf96af8dcddffa540d(name, options)(this.fetch, this.basePath);
    }

    /**
     * Update Geofile
     * @summary updateGeofile
     * @param {string} name 
     * @param {number} id id of Geofile
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GeofileApi
     */
    public 56bd25e41f984f40623f142b39f5e827(name: string, id: number, options?: any) {
        return GeofileApiFp(this.configuration).56bd25e41f984f40623f142b39f5e827(name, id, options)(this.fetch, this.basePath);
    }

    /**
     * Get all Geofiles
     * @summary getGeofileList
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GeofileApi
     */
    public 5bb6226b9c5373a0798ea335b8620269(options?: any) {
        return GeofileApiFp(this.configuration).5bb6226b9c5373a0798ea335b8620269(options)(this.fetch, this.basePath);
    }

    /**
     * Get Geofile
     * @summary getGeofileItem
     * @param {number} id id of Geofile
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GeofileApi
     */
    public 7926eea4a2535dbf125e3f0c7b01c0d5(id: number, options?: any) {
        return GeofileApiFp(this.configuration).7926eea4a2535dbf125e3f0c7b01c0d5(id, options)(this.fetch, this.basePath);
    }

}
/**
 * GeoreferencedMapApi - fetch parameter creator
 * @export
 */
export const GeoreferencedMapApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Delete GeoreferencedMap
         * @summary deleteGeoreferencedMap
         * @param {number} id id of GeoreferencedMap
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        2da30fec0600f1315a69e6b7df036264(id: number, options: any = {}): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling 2da30fec0600f1315a69e6b7df036264.');
            }
            const localVarPath = `/georeferencedMaps/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'DELETE' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get GeoreferencedMap
         * @summary getGeoreferencedMapItem
         * @param {number} id id of GeoreferencedMap
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        5aa6d43be787f05232b50135abc8d28a(id: number, options: any = {}): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling 5aa6d43be787f05232b50135abc8d28a.');
            }
            const localVarPath = `/georeferencedMaps/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Create GeoreferencedMap
         * @summary createGeoreferencedMap
         * @param {string} name 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        5b7c00ad16af2bbc526833a99c0c7549(name: string, options: any = {}): FetchArgs {
            // verify required parameter 'name' is not null or undefined
            if (name === null || name === undefined) {
                throw new RequiredError('name','Required parameter name was null or undefined when calling 5b7c00ad16af2bbc526833a99c0c7549.');
            }
            const localVarPath = `/georeferencedMaps`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new url.URLSearchParams();

            if (name !== undefined) {
                localVarFormParams.set('name', name as any);
            }

            localVarHeaderParameter['Content-Type'] = 'application/x-www-form-urlencoded';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            localVarRequestOptions.body = localVarFormParams.toString();

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get all GeoreferencedMaps
         * @summary getGeoreferencedMapList
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        dedf39617ecb7af96d8e8d48810b5729(options: any = {}): FetchArgs {
            const localVarPath = `/georeferencedMaps`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update GeoreferencedMap
         * @summary updateGeoreferencedMap
         * @param {string} name 
         * @param {number} id id of GeoreferencedMap
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        eb681b0bf23941209b4da2efc88dfb89(name: string, id: number, options: any = {}): FetchArgs {
            // verify required parameter 'name' is not null or undefined
            if (name === null || name === undefined) {
                throw new RequiredError('name','Required parameter name was null or undefined when calling eb681b0bf23941209b4da2efc88dfb89.');
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling eb681b0bf23941209b4da2efc88dfb89.');
            }
            const localVarPath = `/georeferencedMaps/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'PUT' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new url.URLSearchParams();

            if (name !== undefined) {
                localVarFormParams.set('name', name as any);
            }

            localVarHeaderParameter['Content-Type'] = 'application/x-www-form-urlencoded';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            localVarRequestOptions.body = localVarFormParams.toString();

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * GeoreferencedMapApi - functional programming interface
 * @export
 */
export const GeoreferencedMapApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Delete GeoreferencedMap
         * @summary deleteGeoreferencedMap
         * @param {number} id id of GeoreferencedMap
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        2da30fec0600f1315a69e6b7df036264(id: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = GeoreferencedMapApiFetchParamCreator(configuration).2da30fec0600f1315a69e6b7df036264(id, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Get GeoreferencedMap
         * @summary getGeoreferencedMapItem
         * @param {number} id id of GeoreferencedMap
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        5aa6d43be787f05232b50135abc8d28a(id: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = GeoreferencedMapApiFetchParamCreator(configuration).5aa6d43be787f05232b50135abc8d28a(id, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Create GeoreferencedMap
         * @summary createGeoreferencedMap
         * @param {string} name 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        5b7c00ad16af2bbc526833a99c0c7549(name: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = GeoreferencedMapApiFetchParamCreator(configuration).5b7c00ad16af2bbc526833a99c0c7549(name, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Get all GeoreferencedMaps
         * @summary getGeoreferencedMapList
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        dedf39617ecb7af96d8e8d48810b5729(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = GeoreferencedMapApiFetchParamCreator(configuration).dedf39617ecb7af96d8e8d48810b5729(options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Update GeoreferencedMap
         * @summary updateGeoreferencedMap
         * @param {string} name 
         * @param {number} id id of GeoreferencedMap
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        eb681b0bf23941209b4da2efc88dfb89(name: string, id: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = GeoreferencedMapApiFetchParamCreator(configuration).eb681b0bf23941209b4da2efc88dfb89(name, id, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * GeoreferencedMapApi - factory interface
 * @export
 */
export const GeoreferencedMapApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * Delete GeoreferencedMap
         * @summary deleteGeoreferencedMap
         * @param {number} id id of GeoreferencedMap
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        2da30fec0600f1315a69e6b7df036264(id: number, options?: any) {
            return GeoreferencedMapApiFp(configuration).2da30fec0600f1315a69e6b7df036264(id, options)(fetch, basePath);
        },
        /**
         * Get GeoreferencedMap
         * @summary getGeoreferencedMapItem
         * @param {number} id id of GeoreferencedMap
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        5aa6d43be787f05232b50135abc8d28a(id: number, options?: any) {
            return GeoreferencedMapApiFp(configuration).5aa6d43be787f05232b50135abc8d28a(id, options)(fetch, basePath);
        },
        /**
         * Create GeoreferencedMap
         * @summary createGeoreferencedMap
         * @param {string} name 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        5b7c00ad16af2bbc526833a99c0c7549(name: string, options?: any) {
            return GeoreferencedMapApiFp(configuration).5b7c00ad16af2bbc526833a99c0c7549(name, options)(fetch, basePath);
        },
        /**
         * Get all GeoreferencedMaps
         * @summary getGeoreferencedMapList
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        dedf39617ecb7af96d8e8d48810b5729(options?: any) {
            return GeoreferencedMapApiFp(configuration).dedf39617ecb7af96d8e8d48810b5729(options)(fetch, basePath);
        },
        /**
         * Update GeoreferencedMap
         * @summary updateGeoreferencedMap
         * @param {string} name 
         * @param {number} id id of GeoreferencedMap
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        eb681b0bf23941209b4da2efc88dfb89(name: string, id: number, options?: any) {
            return GeoreferencedMapApiFp(configuration).eb681b0bf23941209b4da2efc88dfb89(name, id, options)(fetch, basePath);
        },
    };
};

/**
 * GeoreferencedMapApi - object-oriented interface
 * @export
 * @class GeoreferencedMapApi
 * @extends {BaseAPI}
 */
export class GeoreferencedMapApi extends BaseAPI {
    /**
     * Delete GeoreferencedMap
     * @summary deleteGeoreferencedMap
     * @param {number} id id of GeoreferencedMap
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GeoreferencedMapApi
     */
    public 2da30fec0600f1315a69e6b7df036264(id: number, options?: any) {
        return GeoreferencedMapApiFp(this.configuration).2da30fec0600f1315a69e6b7df036264(id, options)(this.fetch, this.basePath);
    }

    /**
     * Get GeoreferencedMap
     * @summary getGeoreferencedMapItem
     * @param {number} id id of GeoreferencedMap
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GeoreferencedMapApi
     */
    public 5aa6d43be787f05232b50135abc8d28a(id: number, options?: any) {
        return GeoreferencedMapApiFp(this.configuration).5aa6d43be787f05232b50135abc8d28a(id, options)(this.fetch, this.basePath);
    }

    /**
     * Create GeoreferencedMap
     * @summary createGeoreferencedMap
     * @param {string} name 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GeoreferencedMapApi
     */
    public 5b7c00ad16af2bbc526833a99c0c7549(name: string, options?: any) {
        return GeoreferencedMapApiFp(this.configuration).5b7c00ad16af2bbc526833a99c0c7549(name, options)(this.fetch, this.basePath);
    }

    /**
     * Get all GeoreferencedMaps
     * @summary getGeoreferencedMapList
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GeoreferencedMapApi
     */
    public dedf39617ecb7af96d8e8d48810b5729(options?: any) {
        return GeoreferencedMapApiFp(this.configuration).dedf39617ecb7af96d8e8d48810b5729(options)(this.fetch, this.basePath);
    }

    /**
     * Update GeoreferencedMap
     * @summary updateGeoreferencedMap
     * @param {string} name 
     * @param {number} id id of GeoreferencedMap
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GeoreferencedMapApi
     */
    public eb681b0bf23941209b4da2efc88dfb89(name: string, id: number, options?: any) {
        return GeoreferencedMapApiFp(this.configuration).eb681b0bf23941209b4da2efc88dfb89(name, id, options)(this.fetch, this.basePath);
    }

}
/**
 * ImageApi - fetch parameter creator
 * @export
 */
export const ImageApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Delete Image
         * @summary deleteImage
         * @param {number} id id of Image
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        5183e00186551512bbeb06d3d6d156cd(id: number, options: any = {}): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling 5183e00186551512bbeb06d3d6d156cd.');
            }
            const localVarPath = `/images/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'DELETE' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update Image
         * @summary updateImage
         * @param {string} name 
         * @param {number} id id of Image
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        63bb1b2694a4134e1e5798c7a683a3cc(name: string, id: number, options: any = {}): FetchArgs {
            // verify required parameter 'name' is not null or undefined
            if (name === null || name === undefined) {
                throw new RequiredError('name','Required parameter name was null or undefined when calling 63bb1b2694a4134e1e5798c7a683a3cc.');
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling 63bb1b2694a4134e1e5798c7a683a3cc.');
            }
            const localVarPath = `/images/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'PUT' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new url.URLSearchParams();

            if (name !== undefined) {
                localVarFormParams.set('name', name as any);
            }

            localVarHeaderParameter['Content-Type'] = 'application/x-www-form-urlencoded';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            localVarRequestOptions.body = localVarFormParams.toString();

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get all Images
         * @summary getImageList
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        8664187b703ad558537c9d91449eed7a(options: any = {}): FetchArgs {
            const localVarPath = `/images`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Create Image
         * @summary createImage
         * @param {string} name 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        91c6b95c1b6104ea3fc0a7f1f85abafe(name: string, options: any = {}): FetchArgs {
            // verify required parameter 'name' is not null or undefined
            if (name === null || name === undefined) {
                throw new RequiredError('name','Required parameter name was null or undefined when calling 91c6b95c1b6104ea3fc0a7f1f85abafe.');
            }
            const localVarPath = `/images`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new url.URLSearchParams();

            if (name !== undefined) {
                localVarFormParams.set('name', name as any);
            }

            localVarHeaderParameter['Content-Type'] = 'application/x-www-form-urlencoded';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            localVarRequestOptions.body = localVarFormParams.toString();

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get Image
         * @summary getImageItem
         * @param {number} id id of Image
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        e76e9b25359179f7558a7309abaa8bd1(id: number, options: any = {}): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling e76e9b25359179f7558a7309abaa8bd1.');
            }
            const localVarPath = `/images/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ImageApi - functional programming interface
 * @export
 */
export const ImageApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Delete Image
         * @summary deleteImage
         * @param {number} id id of Image
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        5183e00186551512bbeb06d3d6d156cd(id: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = ImageApiFetchParamCreator(configuration).5183e00186551512bbeb06d3d6d156cd(id, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Update Image
         * @summary updateImage
         * @param {string} name 
         * @param {number} id id of Image
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        63bb1b2694a4134e1e5798c7a683a3cc(name: string, id: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = ImageApiFetchParamCreator(configuration).63bb1b2694a4134e1e5798c7a683a3cc(name, id, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Get all Images
         * @summary getImageList
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        8664187b703ad558537c9d91449eed7a(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = ImageApiFetchParamCreator(configuration).8664187b703ad558537c9d91449eed7a(options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Create Image
         * @summary createImage
         * @param {string} name 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        91c6b95c1b6104ea3fc0a7f1f85abafe(name: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = ImageApiFetchParamCreator(configuration).91c6b95c1b6104ea3fc0a7f1f85abafe(name, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Get Image
         * @summary getImageItem
         * @param {number} id id of Image
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        e76e9b25359179f7558a7309abaa8bd1(id: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = ImageApiFetchParamCreator(configuration).e76e9b25359179f7558a7309abaa8bd1(id, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * ImageApi - factory interface
 * @export
 */
export const ImageApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * Delete Image
         * @summary deleteImage
         * @param {number} id id of Image
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        5183e00186551512bbeb06d3d6d156cd(id: number, options?: any) {
            return ImageApiFp(configuration).5183e00186551512bbeb06d3d6d156cd(id, options)(fetch, basePath);
        },
        /**
         * Update Image
         * @summary updateImage
         * @param {string} name 
         * @param {number} id id of Image
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        63bb1b2694a4134e1e5798c7a683a3cc(name: string, id: number, options?: any) {
            return ImageApiFp(configuration).63bb1b2694a4134e1e5798c7a683a3cc(name, id, options)(fetch, basePath);
        },
        /**
         * Get all Images
         * @summary getImageList
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        8664187b703ad558537c9d91449eed7a(options?: any) {
            return ImageApiFp(configuration).8664187b703ad558537c9d91449eed7a(options)(fetch, basePath);
        },
        /**
         * Create Image
         * @summary createImage
         * @param {string} name 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        91c6b95c1b6104ea3fc0a7f1f85abafe(name: string, options?: any) {
            return ImageApiFp(configuration).91c6b95c1b6104ea3fc0a7f1f85abafe(name, options)(fetch, basePath);
        },
        /**
         * Get Image
         * @summary getImageItem
         * @param {number} id id of Image
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        e76e9b25359179f7558a7309abaa8bd1(id: number, options?: any) {
            return ImageApiFp(configuration).e76e9b25359179f7558a7309abaa8bd1(id, options)(fetch, basePath);
        },
    };
};

/**
 * ImageApi - object-oriented interface
 * @export
 * @class ImageApi
 * @extends {BaseAPI}
 */
export class ImageApi extends BaseAPI {
    /**
     * Delete Image
     * @summary deleteImage
     * @param {number} id id of Image
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ImageApi
     */
    public 5183e00186551512bbeb06d3d6d156cd(id: number, options?: any) {
        return ImageApiFp(this.configuration).5183e00186551512bbeb06d3d6d156cd(id, options)(this.fetch, this.basePath);
    }

    /**
     * Update Image
     * @summary updateImage
     * @param {string} name 
     * @param {number} id id of Image
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ImageApi
     */
    public 63bb1b2694a4134e1e5798c7a683a3cc(name: string, id: number, options?: any) {
        return ImageApiFp(this.configuration).63bb1b2694a4134e1e5798c7a683a3cc(name, id, options)(this.fetch, this.basePath);
    }

    /**
     * Get all Images
     * @summary getImageList
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ImageApi
     */
    public 8664187b703ad558537c9d91449eed7a(options?: any) {
        return ImageApiFp(this.configuration).8664187b703ad558537c9d91449eed7a(options)(this.fetch, this.basePath);
    }

    /**
     * Create Image
     * @summary createImage
     * @param {string} name 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ImageApi
     */
    public 91c6b95c1b6104ea3fc0a7f1f85abafe(name: string, options?: any) {
        return ImageApiFp(this.configuration).91c6b95c1b6104ea3fc0a7f1f85abafe(name, options)(this.fetch, this.basePath);
    }

    /**
     * Get Image
     * @summary getImageItem
     * @param {number} id id of Image
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ImageApi
     */
    public e76e9b25359179f7558a7309abaa8bd1(id: number, options?: any) {
        return ImageApiFp(this.configuration).e76e9b25359179f7558a7309abaa8bd1(id, options)(this.fetch, this.basePath);
    }

}
/**
 * LogApi - fetch parameter creator
 * @export
 */
export const LogApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Update Log
         * @summary updateLog
         * @param {string} name 
         * @param {number} id id of Log
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        3ac95b87739c3f60f50f01405bde87ad(name: string, id: number, options: any = {}): FetchArgs {
            // verify required parameter 'name' is not null or undefined
            if (name === null || name === undefined) {
                throw new RequiredError('name','Required parameter name was null or undefined when calling 3ac95b87739c3f60f50f01405bde87ad.');
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling 3ac95b87739c3f60f50f01405bde87ad.');
            }
            const localVarPath = `/logs/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'PUT' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new url.URLSearchParams();

            if (name !== undefined) {
                localVarFormParams.set('name', name as any);
            }

            localVarHeaderParameter['Content-Type'] = 'application/x-www-form-urlencoded';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            localVarRequestOptions.body = localVarFormParams.toString();

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get Log
         * @summary getLogItem
         * @param {number} id id of Log
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        4aa2b06765e6a46bfee37102d6810c88(id: number, options: any = {}): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling 4aa2b06765e6a46bfee37102d6810c88.');
            }
            const localVarPath = `/logs/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete Log
         * @summary deleteLog
         * @param {number} id id of Log
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        a8600d888983a5555731f45fa9600ddb(id: number, options: any = {}): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling a8600d888983a5555731f45fa9600ddb.');
            }
            const localVarPath = `/logs/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'DELETE' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Create Log
         * @summary createLog
         * @param {string} name 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        c4d265e8dccd6fd68487c2bfbe5943ac(name: string, options: any = {}): FetchArgs {
            // verify required parameter 'name' is not null or undefined
            if (name === null || name === undefined) {
                throw new RequiredError('name','Required parameter name was null or undefined when calling c4d265e8dccd6fd68487c2bfbe5943ac.');
            }
            const localVarPath = `/logs`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new url.URLSearchParams();

            if (name !== undefined) {
                localVarFormParams.set('name', name as any);
            }

            localVarHeaderParameter['Content-Type'] = 'application/x-www-form-urlencoded';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            localVarRequestOptions.body = localVarFormParams.toString();

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get all Logs
         * @summary getLogList
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        f98af73e23990227213ec217d6670d2b(options: any = {}): FetchArgs {
            const localVarPath = `/logs`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * LogApi - functional programming interface
 * @export
 */
export const LogApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Update Log
         * @summary updateLog
         * @param {string} name 
         * @param {number} id id of Log
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        3ac95b87739c3f60f50f01405bde87ad(name: string, id: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = LogApiFetchParamCreator(configuration).3ac95b87739c3f60f50f01405bde87ad(name, id, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Get Log
         * @summary getLogItem
         * @param {number} id id of Log
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        4aa2b06765e6a46bfee37102d6810c88(id: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = LogApiFetchParamCreator(configuration).4aa2b06765e6a46bfee37102d6810c88(id, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Delete Log
         * @summary deleteLog
         * @param {number} id id of Log
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        a8600d888983a5555731f45fa9600ddb(id: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = LogApiFetchParamCreator(configuration).a8600d888983a5555731f45fa9600ddb(id, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Create Log
         * @summary createLog
         * @param {string} name 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        c4d265e8dccd6fd68487c2bfbe5943ac(name: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = LogApiFetchParamCreator(configuration).c4d265e8dccd6fd68487c2bfbe5943ac(name, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Get all Logs
         * @summary getLogList
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        f98af73e23990227213ec217d6670d2b(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = LogApiFetchParamCreator(configuration).f98af73e23990227213ec217d6670d2b(options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * LogApi - factory interface
 * @export
 */
export const LogApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * Update Log
         * @summary updateLog
         * @param {string} name 
         * @param {number} id id of Log
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        3ac95b87739c3f60f50f01405bde87ad(name: string, id: number, options?: any) {
            return LogApiFp(configuration).3ac95b87739c3f60f50f01405bde87ad(name, id, options)(fetch, basePath);
        },
        /**
         * Get Log
         * @summary getLogItem
         * @param {number} id id of Log
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        4aa2b06765e6a46bfee37102d6810c88(id: number, options?: any) {
            return LogApiFp(configuration).4aa2b06765e6a46bfee37102d6810c88(id, options)(fetch, basePath);
        },
        /**
         * Delete Log
         * @summary deleteLog
         * @param {number} id id of Log
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        a8600d888983a5555731f45fa9600ddb(id: number, options?: any) {
            return LogApiFp(configuration).a8600d888983a5555731f45fa9600ddb(id, options)(fetch, basePath);
        },
        /**
         * Create Log
         * @summary createLog
         * @param {string} name 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        c4d265e8dccd6fd68487c2bfbe5943ac(name: string, options?: any) {
            return LogApiFp(configuration).c4d265e8dccd6fd68487c2bfbe5943ac(name, options)(fetch, basePath);
        },
        /**
         * Get all Logs
         * @summary getLogList
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        f98af73e23990227213ec217d6670d2b(options?: any) {
            return LogApiFp(configuration).f98af73e23990227213ec217d6670d2b(options)(fetch, basePath);
        },
    };
};

/**
 * LogApi - object-oriented interface
 * @export
 * @class LogApi
 * @extends {BaseAPI}
 */
export class LogApi extends BaseAPI {
    /**
     * Update Log
     * @summary updateLog
     * @param {string} name 
     * @param {number} id id of Log
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LogApi
     */
    public 3ac95b87739c3f60f50f01405bde87ad(name: string, id: number, options?: any) {
        return LogApiFp(this.configuration).3ac95b87739c3f60f50f01405bde87ad(name, id, options)(this.fetch, this.basePath);
    }

    /**
     * Get Log
     * @summary getLogItem
     * @param {number} id id of Log
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LogApi
     */
    public 4aa2b06765e6a46bfee37102d6810c88(id: number, options?: any) {
        return LogApiFp(this.configuration).4aa2b06765e6a46bfee37102d6810c88(id, options)(this.fetch, this.basePath);
    }

    /**
     * Delete Log
     * @summary deleteLog
     * @param {number} id id of Log
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LogApi
     */
    public a8600d888983a5555731f45fa9600ddb(id: number, options?: any) {
        return LogApiFp(this.configuration).a8600d888983a5555731f45fa9600ddb(id, options)(this.fetch, this.basePath);
    }

    /**
     * Create Log
     * @summary createLog
     * @param {string} name 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LogApi
     */
    public c4d265e8dccd6fd68487c2bfbe5943ac(name: string, options?: any) {
        return LogApiFp(this.configuration).c4d265e8dccd6fd68487c2bfbe5943ac(name, options)(this.fetch, this.basePath);
    }

    /**
     * Get all Logs
     * @summary getLogList
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LogApi
     */
    public f98af73e23990227213ec217d6670d2b(options?: any) {
        return LogApiFp(this.configuration).f98af73e23990227213ec217d6670d2b(options)(this.fetch, this.basePath);
    }

}
/**
 * MapViewApi - fetch parameter creator
 * @export
 */
export const MapViewApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Create MapView
         * @summary createMapView
         * @param {string} name 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        01375ebe2deaa8778d005ccf378ba312(name: string, options: any = {}): FetchArgs {
            // verify required parameter 'name' is not null or undefined
            if (name === null || name === undefined) {
                throw new RequiredError('name','Required parameter name was null or undefined when calling 01375ebe2deaa8778d005ccf378ba312.');
            }
            const localVarPath = `/mapViews`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new url.URLSearchParams();

            if (name !== undefined) {
                localVarFormParams.set('name', name as any);
            }

            localVarHeaderParameter['Content-Type'] = 'application/x-www-form-urlencoded';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            localVarRequestOptions.body = localVarFormParams.toString();

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete MapView
         * @summary deleteMapView
         * @param {number} id id of MapView
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        7781581fa54d42b16f38aa39e5ca0553(id: number, options: any = {}): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling 7781581fa54d42b16f38aa39e5ca0553.');
            }
            const localVarPath = `/mapViews/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'DELETE' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get all MapViews
         * @summary getMapViewList
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        8310101e74c64a50acdf3ab482d91216(options: any = {}): FetchArgs {
            const localVarPath = `/mapViews`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update MapView
         * @summary updateMapView
         * @param {string} name 
         * @param {number} id id of MapView
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        8fe83ba341aa4553dcc2c0d02158caff(name: string, id: number, options: any = {}): FetchArgs {
            // verify required parameter 'name' is not null or undefined
            if (name === null || name === undefined) {
                throw new RequiredError('name','Required parameter name was null or undefined when calling 8fe83ba341aa4553dcc2c0d02158caff.');
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling 8fe83ba341aa4553dcc2c0d02158caff.');
            }
            const localVarPath = `/mapViews/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'PUT' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new url.URLSearchParams();

            if (name !== undefined) {
                localVarFormParams.set('name', name as any);
            }

            localVarHeaderParameter['Content-Type'] = 'application/x-www-form-urlencoded';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            localVarRequestOptions.body = localVarFormParams.toString();

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get MapView
         * @summary getMapViewItem
         * @param {number} id id of MapView
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        d8860be06ffbb834f065f28b4ca24063(id: number, options: any = {}): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling d8860be06ffbb834f065f28b4ca24063.');
            }
            const localVarPath = `/mapViews/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * MapViewApi - functional programming interface
 * @export
 */
export const MapViewApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Create MapView
         * @summary createMapView
         * @param {string} name 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        01375ebe2deaa8778d005ccf378ba312(name: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = MapViewApiFetchParamCreator(configuration).01375ebe2deaa8778d005ccf378ba312(name, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Delete MapView
         * @summary deleteMapView
         * @param {number} id id of MapView
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        7781581fa54d42b16f38aa39e5ca0553(id: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = MapViewApiFetchParamCreator(configuration).7781581fa54d42b16f38aa39e5ca0553(id, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Get all MapViews
         * @summary getMapViewList
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        8310101e74c64a50acdf3ab482d91216(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = MapViewApiFetchParamCreator(configuration).8310101e74c64a50acdf3ab482d91216(options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Update MapView
         * @summary updateMapView
         * @param {string} name 
         * @param {number} id id of MapView
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        8fe83ba341aa4553dcc2c0d02158caff(name: string, id: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = MapViewApiFetchParamCreator(configuration).8fe83ba341aa4553dcc2c0d02158caff(name, id, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Get MapView
         * @summary getMapViewItem
         * @param {number} id id of MapView
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        d8860be06ffbb834f065f28b4ca24063(id: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = MapViewApiFetchParamCreator(configuration).d8860be06ffbb834f065f28b4ca24063(id, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * MapViewApi - factory interface
 * @export
 */
export const MapViewApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * Create MapView
         * @summary createMapView
         * @param {string} name 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        01375ebe2deaa8778d005ccf378ba312(name: string, options?: any) {
            return MapViewApiFp(configuration).01375ebe2deaa8778d005ccf378ba312(name, options)(fetch, basePath);
        },
        /**
         * Delete MapView
         * @summary deleteMapView
         * @param {number} id id of MapView
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        7781581fa54d42b16f38aa39e5ca0553(id: number, options?: any) {
            return MapViewApiFp(configuration).7781581fa54d42b16f38aa39e5ca0553(id, options)(fetch, basePath);
        },
        /**
         * Get all MapViews
         * @summary getMapViewList
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        8310101e74c64a50acdf3ab482d91216(options?: any) {
            return MapViewApiFp(configuration).8310101e74c64a50acdf3ab482d91216(options)(fetch, basePath);
        },
        /**
         * Update MapView
         * @summary updateMapView
         * @param {string} name 
         * @param {number} id id of MapView
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        8fe83ba341aa4553dcc2c0d02158caff(name: string, id: number, options?: any) {
            return MapViewApiFp(configuration).8fe83ba341aa4553dcc2c0d02158caff(name, id, options)(fetch, basePath);
        },
        /**
         * Get MapView
         * @summary getMapViewItem
         * @param {number} id id of MapView
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        d8860be06ffbb834f065f28b4ca24063(id: number, options?: any) {
            return MapViewApiFp(configuration).d8860be06ffbb834f065f28b4ca24063(id, options)(fetch, basePath);
        },
    };
};

/**
 * MapViewApi - object-oriented interface
 * @export
 * @class MapViewApi
 * @extends {BaseAPI}
 */
export class MapViewApi extends BaseAPI {
    /**
     * Create MapView
     * @summary createMapView
     * @param {string} name 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MapViewApi
     */
    public 01375ebe2deaa8778d005ccf378ba312(name: string, options?: any) {
        return MapViewApiFp(this.configuration).01375ebe2deaa8778d005ccf378ba312(name, options)(this.fetch, this.basePath);
    }

    /**
     * Delete MapView
     * @summary deleteMapView
     * @param {number} id id of MapView
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MapViewApi
     */
    public 7781581fa54d42b16f38aa39e5ca0553(id: number, options?: any) {
        return MapViewApiFp(this.configuration).7781581fa54d42b16f38aa39e5ca0553(id, options)(this.fetch, this.basePath);
    }

    /**
     * Get all MapViews
     * @summary getMapViewList
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MapViewApi
     */
    public 8310101e74c64a50acdf3ab482d91216(options?: any) {
        return MapViewApiFp(this.configuration).8310101e74c64a50acdf3ab482d91216(options)(this.fetch, this.basePath);
    }

    /**
     * Update MapView
     * @summary updateMapView
     * @param {string} name 
     * @param {number} id id of MapView
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MapViewApi
     */
    public 8fe83ba341aa4553dcc2c0d02158caff(name: string, id: number, options?: any) {
        return MapViewApiFp(this.configuration).8fe83ba341aa4553dcc2c0d02158caff(name, id, options)(this.fetch, this.basePath);
    }

    /**
     * Get MapView
     * @summary getMapViewItem
     * @param {number} id id of MapView
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MapViewApi
     */
    public d8860be06ffbb834f065f28b4ca24063(id: number, options?: any) {
        return MapViewApiFp(this.configuration).d8860be06ffbb834f065f28b4ca24063(id, options)(this.fetch, this.basePath);
    }

}
/**
 * PointApi - fetch parameter creator
 * @export
 */
export const PointApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Get all Points
         * @summary getPointList
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        414e326e5df569e950277de2c8e9c3b1(options: any = {}): FetchArgs {
            const localVarPath = `/points`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update Point
         * @summary updatePoint
         * @param {string} name 
         * @param {number} id id of Point
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        5a5298550ce46a9468da1fc44a5851e2(name: string, id: number, options: any = {}): FetchArgs {
            // verify required parameter 'name' is not null or undefined
            if (name === null || name === undefined) {
                throw new RequiredError('name','Required parameter name was null or undefined when calling 5a5298550ce46a9468da1fc44a5851e2.');
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling 5a5298550ce46a9468da1fc44a5851e2.');
            }
            const localVarPath = `/points/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'PUT' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new url.URLSearchParams();

            if (name !== undefined) {
                localVarFormParams.set('name', name as any);
            }

            localVarHeaderParameter['Content-Type'] = 'application/x-www-form-urlencoded';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            localVarRequestOptions.body = localVarFormParams.toString();

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Create Point
         * @summary createPoint
         * @param {string} name 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        7b9b6b981e45df08007c3f1a42a57595(name: string, options: any = {}): FetchArgs {
            // verify required parameter 'name' is not null or undefined
            if (name === null || name === undefined) {
                throw new RequiredError('name','Required parameter name was null or undefined when calling 7b9b6b981e45df08007c3f1a42a57595.');
            }
            const localVarPath = `/points`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new url.URLSearchParams();

            if (name !== undefined) {
                localVarFormParams.set('name', name as any);
            }

            localVarHeaderParameter['Content-Type'] = 'application/x-www-form-urlencoded';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            localVarRequestOptions.body = localVarFormParams.toString();

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete Point
         * @summary deletePoint
         * @param {number} id id of Point
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        8382eb01398d1029539a633a18910721(id: number, options: any = {}): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling 8382eb01398d1029539a633a18910721.');
            }
            const localVarPath = `/points/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'DELETE' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get Point
         * @summary getPointItem
         * @param {number} id id of Point
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        84890aa276d26faec598361de21ed829(id: number, options: any = {}): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling 84890aa276d26faec598361de21ed829.');
            }
            const localVarPath = `/points/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * PointApi - functional programming interface
 * @export
 */
export const PointApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Get all Points
         * @summary getPointList
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        414e326e5df569e950277de2c8e9c3b1(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = PointApiFetchParamCreator(configuration).414e326e5df569e950277de2c8e9c3b1(options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Update Point
         * @summary updatePoint
         * @param {string} name 
         * @param {number} id id of Point
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        5a5298550ce46a9468da1fc44a5851e2(name: string, id: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = PointApiFetchParamCreator(configuration).5a5298550ce46a9468da1fc44a5851e2(name, id, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Create Point
         * @summary createPoint
         * @param {string} name 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        7b9b6b981e45df08007c3f1a42a57595(name: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = PointApiFetchParamCreator(configuration).7b9b6b981e45df08007c3f1a42a57595(name, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Delete Point
         * @summary deletePoint
         * @param {number} id id of Point
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        8382eb01398d1029539a633a18910721(id: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = PointApiFetchParamCreator(configuration).8382eb01398d1029539a633a18910721(id, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Get Point
         * @summary getPointItem
         * @param {number} id id of Point
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        84890aa276d26faec598361de21ed829(id: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = PointApiFetchParamCreator(configuration).84890aa276d26faec598361de21ed829(id, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * PointApi - factory interface
 * @export
 */
export const PointApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * Get all Points
         * @summary getPointList
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        414e326e5df569e950277de2c8e9c3b1(options?: any) {
            return PointApiFp(configuration).414e326e5df569e950277de2c8e9c3b1(options)(fetch, basePath);
        },
        /**
         * Update Point
         * @summary updatePoint
         * @param {string} name 
         * @param {number} id id of Point
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        5a5298550ce46a9468da1fc44a5851e2(name: string, id: number, options?: any) {
            return PointApiFp(configuration).5a5298550ce46a9468da1fc44a5851e2(name, id, options)(fetch, basePath);
        },
        /**
         * Create Point
         * @summary createPoint
         * @param {string} name 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        7b9b6b981e45df08007c3f1a42a57595(name: string, options?: any) {
            return PointApiFp(configuration).7b9b6b981e45df08007c3f1a42a57595(name, options)(fetch, basePath);
        },
        /**
         * Delete Point
         * @summary deletePoint
         * @param {number} id id of Point
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        8382eb01398d1029539a633a18910721(id: number, options?: any) {
            return PointApiFp(configuration).8382eb01398d1029539a633a18910721(id, options)(fetch, basePath);
        },
        /**
         * Get Point
         * @summary getPointItem
         * @param {number} id id of Point
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        84890aa276d26faec598361de21ed829(id: number, options?: any) {
            return PointApiFp(configuration).84890aa276d26faec598361de21ed829(id, options)(fetch, basePath);
        },
    };
};

/**
 * PointApi - object-oriented interface
 * @export
 * @class PointApi
 * @extends {BaseAPI}
 */
export class PointApi extends BaseAPI {
    /**
     * Get all Points
     * @summary getPointList
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PointApi
     */
    public 414e326e5df569e950277de2c8e9c3b1(options?: any) {
        return PointApiFp(this.configuration).414e326e5df569e950277de2c8e9c3b1(options)(this.fetch, this.basePath);
    }

    /**
     * Update Point
     * @summary updatePoint
     * @param {string} name 
     * @param {number} id id of Point
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PointApi
     */
    public 5a5298550ce46a9468da1fc44a5851e2(name: string, id: number, options?: any) {
        return PointApiFp(this.configuration).5a5298550ce46a9468da1fc44a5851e2(name, id, options)(this.fetch, this.basePath);
    }

    /**
     * Create Point
     * @summary createPoint
     * @param {string} name 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PointApi
     */
    public 7b9b6b981e45df08007c3f1a42a57595(name: string, options?: any) {
        return PointApiFp(this.configuration).7b9b6b981e45df08007c3f1a42a57595(name, options)(this.fetch, this.basePath);
    }

    /**
     * Delete Point
     * @summary deletePoint
     * @param {number} id id of Point
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PointApi
     */
    public 8382eb01398d1029539a633a18910721(id: number, options?: any) {
        return PointApiFp(this.configuration).8382eb01398d1029539a633a18910721(id, options)(this.fetch, this.basePath);
    }

    /**
     * Get Point
     * @summary getPointItem
     * @param {number} id id of Point
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PointApi
     */
    public 84890aa276d26faec598361de21ed829(id: number, options?: any) {
        return PointApiFp(this.configuration).84890aa276d26faec598361de21ed829(id, options)(this.fetch, this.basePath);
    }

}
/**
 * SxgUserApi - fetch parameter creator
 * @export
 */
export const SxgUserApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Update SxgUser
         * @summary updateSxgUser
         * @param {string} name 
         * @param {number} id id of SxgUser
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        1015f4f6430d718f185eca3cc2423024(name: string, id: number, options: any = {}): FetchArgs {
            // verify required parameter 'name' is not null or undefined
            if (name === null || name === undefined) {
                throw new RequiredError('name','Required parameter name was null or undefined when calling 1015f4f6430d718f185eca3cc2423024.');
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling 1015f4f6430d718f185eca3cc2423024.');
            }
            const localVarPath = `/sxgUsers/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'PUT' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new url.URLSearchParams();

            if (name !== undefined) {
                localVarFormParams.set('name', name as any);
            }

            localVarHeaderParameter['Content-Type'] = 'application/x-www-form-urlencoded';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            localVarRequestOptions.body = localVarFormParams.toString();

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get SxgUser
         * @summary getSxgUserItem
         * @param {number} id id of SxgUser
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        367790b415fe7e968903353e93752d48(id: number, options: any = {}): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling 367790b415fe7e968903353e93752d48.');
            }
            const localVarPath = `/sxgUsers/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete SxgUser
         * @summary deleteSxgUser
         * @param {number} id id of SxgUser
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        8fe91923e4e3c2c8daac2a888c304eeb(id: number, options: any = {}): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling 8fe91923e4e3c2c8daac2a888c304eeb.');
            }
            const localVarPath = `/sxgUsers/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'DELETE' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get all SxgUsers
         * @summary getSxgUserList
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        9b39d49adef3b6e430abac14641a50fa(options: any = {}): FetchArgs {
            const localVarPath = `/sxgUsers`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Create SxgUser
         * @summary createSxgUser
         * @param {string} name 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        dbd8a6874ab9d1cab12748fcf39b8a53(name: string, options: any = {}): FetchArgs {
            // verify required parameter 'name' is not null or undefined
            if (name === null || name === undefined) {
                throw new RequiredError('name','Required parameter name was null or undefined when calling dbd8a6874ab9d1cab12748fcf39b8a53.');
            }
            const localVarPath = `/sxgUsers`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new url.URLSearchParams();

            if (name !== undefined) {
                localVarFormParams.set('name', name as any);
            }

            localVarHeaderParameter['Content-Type'] = 'application/x-www-form-urlencoded';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            localVarRequestOptions.body = localVarFormParams.toString();

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SxgUserApi - functional programming interface
 * @export
 */
export const SxgUserApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Update SxgUser
         * @summary updateSxgUser
         * @param {string} name 
         * @param {number} id id of SxgUser
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        1015f4f6430d718f185eca3cc2423024(name: string, id: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = SxgUserApiFetchParamCreator(configuration).1015f4f6430d718f185eca3cc2423024(name, id, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Get SxgUser
         * @summary getSxgUserItem
         * @param {number} id id of SxgUser
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        367790b415fe7e968903353e93752d48(id: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = SxgUserApiFetchParamCreator(configuration).367790b415fe7e968903353e93752d48(id, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Delete SxgUser
         * @summary deleteSxgUser
         * @param {number} id id of SxgUser
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        8fe91923e4e3c2c8daac2a888c304eeb(id: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = SxgUserApiFetchParamCreator(configuration).8fe91923e4e3c2c8daac2a888c304eeb(id, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Get all SxgUsers
         * @summary getSxgUserList
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        9b39d49adef3b6e430abac14641a50fa(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = SxgUserApiFetchParamCreator(configuration).9b39d49adef3b6e430abac14641a50fa(options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Create SxgUser
         * @summary createSxgUser
         * @param {string} name 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        dbd8a6874ab9d1cab12748fcf39b8a53(name: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = SxgUserApiFetchParamCreator(configuration).dbd8a6874ab9d1cab12748fcf39b8a53(name, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * SxgUserApi - factory interface
 * @export
 */
export const SxgUserApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * Update SxgUser
         * @summary updateSxgUser
         * @param {string} name 
         * @param {number} id id of SxgUser
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        1015f4f6430d718f185eca3cc2423024(name: string, id: number, options?: any) {
            return SxgUserApiFp(configuration).1015f4f6430d718f185eca3cc2423024(name, id, options)(fetch, basePath);
        },
        /**
         * Get SxgUser
         * @summary getSxgUserItem
         * @param {number} id id of SxgUser
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        367790b415fe7e968903353e93752d48(id: number, options?: any) {
            return SxgUserApiFp(configuration).367790b415fe7e968903353e93752d48(id, options)(fetch, basePath);
        },
        /**
         * Delete SxgUser
         * @summary deleteSxgUser
         * @param {number} id id of SxgUser
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        8fe91923e4e3c2c8daac2a888c304eeb(id: number, options?: any) {
            return SxgUserApiFp(configuration).8fe91923e4e3c2c8daac2a888c304eeb(id, options)(fetch, basePath);
        },
        /**
         * Get all SxgUsers
         * @summary getSxgUserList
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        9b39d49adef3b6e430abac14641a50fa(options?: any) {
            return SxgUserApiFp(configuration).9b39d49adef3b6e430abac14641a50fa(options)(fetch, basePath);
        },
        /**
         * Create SxgUser
         * @summary createSxgUser
         * @param {string} name 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        dbd8a6874ab9d1cab12748fcf39b8a53(name: string, options?: any) {
            return SxgUserApiFp(configuration).dbd8a6874ab9d1cab12748fcf39b8a53(name, options)(fetch, basePath);
        },
    };
};

/**
 * SxgUserApi - object-oriented interface
 * @export
 * @class SxgUserApi
 * @extends {BaseAPI}
 */
export class SxgUserApi extends BaseAPI {
    /**
     * Update SxgUser
     * @summary updateSxgUser
     * @param {string} name 
     * @param {number} id id of SxgUser
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SxgUserApi
     */
    public 1015f4f6430d718f185eca3cc2423024(name: string, id: number, options?: any) {
        return SxgUserApiFp(this.configuration).1015f4f6430d718f185eca3cc2423024(name, id, options)(this.fetch, this.basePath);
    }

    /**
     * Get SxgUser
     * @summary getSxgUserItem
     * @param {number} id id of SxgUser
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SxgUserApi
     */
    public 367790b415fe7e968903353e93752d48(id: number, options?: any) {
        return SxgUserApiFp(this.configuration).367790b415fe7e968903353e93752d48(id, options)(this.fetch, this.basePath);
    }

    /**
     * Delete SxgUser
     * @summary deleteSxgUser
     * @param {number} id id of SxgUser
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SxgUserApi
     */
    public 8fe91923e4e3c2c8daac2a888c304eeb(id: number, options?: any) {
        return SxgUserApiFp(this.configuration).8fe91923e4e3c2c8daac2a888c304eeb(id, options)(this.fetch, this.basePath);
    }

    /**
     * Get all SxgUsers
     * @summary getSxgUserList
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SxgUserApi
     */
    public 9b39d49adef3b6e430abac14641a50fa(options?: any) {
        return SxgUserApiFp(this.configuration).9b39d49adef3b6e430abac14641a50fa(options)(this.fetch, this.basePath);
    }

    /**
     * Create SxgUser
     * @summary createSxgUser
     * @param {string} name 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SxgUserApi
     */
    public dbd8a6874ab9d1cab12748fcf39b8a53(name: string, options?: any) {
        return SxgUserApiFp(this.configuration).dbd8a6874ab9d1cab12748fcf39b8a53(name, options)(this.fetch, this.basePath);
    }

}
/**
 * TagApi - fetch parameter creator
 * @export
 */
export const TagApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Get Tag
         * @summary getTagItem
         * @param {number} id id of Tag
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        35978f1f50ee3ef20582e565ac7b6720(id: number, options: any = {}): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling 35978f1f50ee3ef20582e565ac7b6720.');
            }
            const localVarPath = `/tags/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update Tag
         * @summary updateTag
         * @param {string} name 
         * @param {number} id id of Tag
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        3e3cc7bb590b34997dd14f6ca40743f3(name: string, id: number, options: any = {}): FetchArgs {
            // verify required parameter 'name' is not null or undefined
            if (name === null || name === undefined) {
                throw new RequiredError('name','Required parameter name was null or undefined when calling 3e3cc7bb590b34997dd14f6ca40743f3.');
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling 3e3cc7bb590b34997dd14f6ca40743f3.');
            }
            const localVarPath = `/tags/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'PUT' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new url.URLSearchParams();

            if (name !== undefined) {
                localVarFormParams.set('name', name as any);
            }

            localVarHeaderParameter['Content-Type'] = 'application/x-www-form-urlencoded';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            localVarRequestOptions.body = localVarFormParams.toString();

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get all Tags
         * @summary getTagList
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        57fc6cc7a88ad83c6888887c40e6094a(options: any = {}): FetchArgs {
            const localVarPath = `/tags`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete Tag
         * @summary deleteTag
         * @param {number} id id of Tag
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        5ac3d7ca53caad3cfe1e4ef1a673ba07(id: number, options: any = {}): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling 5ac3d7ca53caad3cfe1e4ef1a673ba07.');
            }
            const localVarPath = `/tags/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'DELETE' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Create Tag
         * @summary createTag
         * @param {string} name 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        c851a6840f9037781df6fcc88bd294e4(name: string, options: any = {}): FetchArgs {
            // verify required parameter 'name' is not null or undefined
            if (name === null || name === undefined) {
                throw new RequiredError('name','Required parameter name was null or undefined when calling c851a6840f9037781df6fcc88bd294e4.');
            }
            const localVarPath = `/tags`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new url.URLSearchParams();

            if (name !== undefined) {
                localVarFormParams.set('name', name as any);
            }

            localVarHeaderParameter['Content-Type'] = 'application/x-www-form-urlencoded';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            localVarRequestOptions.body = localVarFormParams.toString();

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * TagApi - functional programming interface
 * @export
 */
export const TagApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Get Tag
         * @summary getTagItem
         * @param {number} id id of Tag
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        35978f1f50ee3ef20582e565ac7b6720(id: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = TagApiFetchParamCreator(configuration).35978f1f50ee3ef20582e565ac7b6720(id, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Update Tag
         * @summary updateTag
         * @param {string} name 
         * @param {number} id id of Tag
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        3e3cc7bb590b34997dd14f6ca40743f3(name: string, id: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = TagApiFetchParamCreator(configuration).3e3cc7bb590b34997dd14f6ca40743f3(name, id, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Get all Tags
         * @summary getTagList
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        57fc6cc7a88ad83c6888887c40e6094a(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = TagApiFetchParamCreator(configuration).57fc6cc7a88ad83c6888887c40e6094a(options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Delete Tag
         * @summary deleteTag
         * @param {number} id id of Tag
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        5ac3d7ca53caad3cfe1e4ef1a673ba07(id: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = TagApiFetchParamCreator(configuration).5ac3d7ca53caad3cfe1e4ef1a673ba07(id, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Create Tag
         * @summary createTag
         * @param {string} name 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        c851a6840f9037781df6fcc88bd294e4(name: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = TagApiFetchParamCreator(configuration).c851a6840f9037781df6fcc88bd294e4(name, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * TagApi - factory interface
 * @export
 */
export const TagApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * Get Tag
         * @summary getTagItem
         * @param {number} id id of Tag
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        35978f1f50ee3ef20582e565ac7b6720(id: number, options?: any) {
            return TagApiFp(configuration).35978f1f50ee3ef20582e565ac7b6720(id, options)(fetch, basePath);
        },
        /**
         * Update Tag
         * @summary updateTag
         * @param {string} name 
         * @param {number} id id of Tag
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        3e3cc7bb590b34997dd14f6ca40743f3(name: string, id: number, options?: any) {
            return TagApiFp(configuration).3e3cc7bb590b34997dd14f6ca40743f3(name, id, options)(fetch, basePath);
        },
        /**
         * Get all Tags
         * @summary getTagList
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        57fc6cc7a88ad83c6888887c40e6094a(options?: any) {
            return TagApiFp(configuration).57fc6cc7a88ad83c6888887c40e6094a(options)(fetch, basePath);
        },
        /**
         * Delete Tag
         * @summary deleteTag
         * @param {number} id id of Tag
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        5ac3d7ca53caad3cfe1e4ef1a673ba07(id: number, options?: any) {
            return TagApiFp(configuration).5ac3d7ca53caad3cfe1e4ef1a673ba07(id, options)(fetch, basePath);
        },
        /**
         * Create Tag
         * @summary createTag
         * @param {string} name 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        c851a6840f9037781df6fcc88bd294e4(name: string, options?: any) {
            return TagApiFp(configuration).c851a6840f9037781df6fcc88bd294e4(name, options)(fetch, basePath);
        },
    };
};

/**
 * TagApi - object-oriented interface
 * @export
 * @class TagApi
 * @extends {BaseAPI}
 */
export class TagApi extends BaseAPI {
    /**
     * Get Tag
     * @summary getTagItem
     * @param {number} id id of Tag
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TagApi
     */
    public 35978f1f50ee3ef20582e565ac7b6720(id: number, options?: any) {
        return TagApiFp(this.configuration).35978f1f50ee3ef20582e565ac7b6720(id, options)(this.fetch, this.basePath);
    }

    /**
     * Update Tag
     * @summary updateTag
     * @param {string} name 
     * @param {number} id id of Tag
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TagApi
     */
    public 3e3cc7bb590b34997dd14f6ca40743f3(name: string, id: number, options?: any) {
        return TagApiFp(this.configuration).3e3cc7bb590b34997dd14f6ca40743f3(name, id, options)(this.fetch, this.basePath);
    }

    /**
     * Get all Tags
     * @summary getTagList
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TagApi
     */
    public 57fc6cc7a88ad83c6888887c40e6094a(options?: any) {
        return TagApiFp(this.configuration).57fc6cc7a88ad83c6888887c40e6094a(options)(this.fetch, this.basePath);
    }

    /**
     * Delete Tag
     * @summary deleteTag
     * @param {number} id id of Tag
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TagApi
     */
    public 5ac3d7ca53caad3cfe1e4ef1a673ba07(id: number, options?: any) {
        return TagApiFp(this.configuration).5ac3d7ca53caad3cfe1e4ef1a673ba07(id, options)(this.fetch, this.basePath);
    }

    /**
     * Create Tag
     * @summary createTag
     * @param {string} name 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TagApi
     */
    public c851a6840f9037781df6fcc88bd294e4(name: string, options?: any) {
        return TagApiFp(this.configuration).c851a6840f9037781df6fcc88bd294e4(name, options)(this.fetch, this.basePath);
    }

}
/**
 * TeamMemberApi - fetch parameter creator
 * @export
 */
export const TeamMemberApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Get TeamMember
         * @summary getTeamMemberItem
         * @param {number} id id of TeamMember
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        504f1e2454344367b03491dac070cd56(id: number, options: any = {}): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling 504f1e2454344367b03491dac070cd56.');
            }
            const localVarPath = `/teamMembers/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get all TeamMembers
         * @summary getTeamMemberList
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        50e42d2216f357cb3fc2c9d04e56d568(options: any = {}): FetchArgs {
            const localVarPath = `/teamMembers`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Create TeamMember
         * @summary createTeamMember
         * @param {string} name 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        793a2f9812ee40dbbf2e79904985274c(name: string, options: any = {}): FetchArgs {
            // verify required parameter 'name' is not null or undefined
            if (name === null || name === undefined) {
                throw new RequiredError('name','Required parameter name was null or undefined when calling 793a2f9812ee40dbbf2e79904985274c.');
            }
            const localVarPath = `/teamMembers`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new url.URLSearchParams();

            if (name !== undefined) {
                localVarFormParams.set('name', name as any);
            }

            localVarHeaderParameter['Content-Type'] = 'application/x-www-form-urlencoded';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            localVarRequestOptions.body = localVarFormParams.toString();

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete TeamMember
         * @summary deleteTeamMember
         * @param {number} id id of TeamMember
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        87f4ab442a55d282e1ebade1a87da9c3(id: number, options: any = {}): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling 87f4ab442a55d282e1ebade1a87da9c3.');
            }
            const localVarPath = `/teamMembers/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'DELETE' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update TeamMember
         * @summary updateTeamMember
         * @param {string} name 
         * @param {number} id id of TeamMember
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        d17af343b44e4ce310e0f9288ec00d3a(name: string, id: number, options: any = {}): FetchArgs {
            // verify required parameter 'name' is not null or undefined
            if (name === null || name === undefined) {
                throw new RequiredError('name','Required parameter name was null or undefined when calling d17af343b44e4ce310e0f9288ec00d3a.');
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling d17af343b44e4ce310e0f9288ec00d3a.');
            }
            const localVarPath = `/teamMembers/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'PUT' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new url.URLSearchParams();

            if (name !== undefined) {
                localVarFormParams.set('name', name as any);
            }

            localVarHeaderParameter['Content-Type'] = 'application/x-www-form-urlencoded';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            localVarRequestOptions.body = localVarFormParams.toString();

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * TeamMemberApi - functional programming interface
 * @export
 */
export const TeamMemberApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Get TeamMember
         * @summary getTeamMemberItem
         * @param {number} id id of TeamMember
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        504f1e2454344367b03491dac070cd56(id: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = TeamMemberApiFetchParamCreator(configuration).504f1e2454344367b03491dac070cd56(id, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Get all TeamMembers
         * @summary getTeamMemberList
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        50e42d2216f357cb3fc2c9d04e56d568(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = TeamMemberApiFetchParamCreator(configuration).50e42d2216f357cb3fc2c9d04e56d568(options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Create TeamMember
         * @summary createTeamMember
         * @param {string} name 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        793a2f9812ee40dbbf2e79904985274c(name: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = TeamMemberApiFetchParamCreator(configuration).793a2f9812ee40dbbf2e79904985274c(name, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Delete TeamMember
         * @summary deleteTeamMember
         * @param {number} id id of TeamMember
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        87f4ab442a55d282e1ebade1a87da9c3(id: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = TeamMemberApiFetchParamCreator(configuration).87f4ab442a55d282e1ebade1a87da9c3(id, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Update TeamMember
         * @summary updateTeamMember
         * @param {string} name 
         * @param {number} id id of TeamMember
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        d17af343b44e4ce310e0f9288ec00d3a(name: string, id: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = TeamMemberApiFetchParamCreator(configuration).d17af343b44e4ce310e0f9288ec00d3a(name, id, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * TeamMemberApi - factory interface
 * @export
 */
export const TeamMemberApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * Get TeamMember
         * @summary getTeamMemberItem
         * @param {number} id id of TeamMember
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        504f1e2454344367b03491dac070cd56(id: number, options?: any) {
            return TeamMemberApiFp(configuration).504f1e2454344367b03491dac070cd56(id, options)(fetch, basePath);
        },
        /**
         * Get all TeamMembers
         * @summary getTeamMemberList
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        50e42d2216f357cb3fc2c9d04e56d568(options?: any) {
            return TeamMemberApiFp(configuration).50e42d2216f357cb3fc2c9d04e56d568(options)(fetch, basePath);
        },
        /**
         * Create TeamMember
         * @summary createTeamMember
         * @param {string} name 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        793a2f9812ee40dbbf2e79904985274c(name: string, options?: any) {
            return TeamMemberApiFp(configuration).793a2f9812ee40dbbf2e79904985274c(name, options)(fetch, basePath);
        },
        /**
         * Delete TeamMember
         * @summary deleteTeamMember
         * @param {number} id id of TeamMember
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        87f4ab442a55d282e1ebade1a87da9c3(id: number, options?: any) {
            return TeamMemberApiFp(configuration).87f4ab442a55d282e1ebade1a87da9c3(id, options)(fetch, basePath);
        },
        /**
         * Update TeamMember
         * @summary updateTeamMember
         * @param {string} name 
         * @param {number} id id of TeamMember
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        d17af343b44e4ce310e0f9288ec00d3a(name: string, id: number, options?: any) {
            return TeamMemberApiFp(configuration).d17af343b44e4ce310e0f9288ec00d3a(name, id, options)(fetch, basePath);
        },
    };
};

/**
 * TeamMemberApi - object-oriented interface
 * @export
 * @class TeamMemberApi
 * @extends {BaseAPI}
 */
export class TeamMemberApi extends BaseAPI {
    /**
     * Get TeamMember
     * @summary getTeamMemberItem
     * @param {number} id id of TeamMember
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamMemberApi
     */
    public 504f1e2454344367b03491dac070cd56(id: number, options?: any) {
        return TeamMemberApiFp(this.configuration).504f1e2454344367b03491dac070cd56(id, options)(this.fetch, this.basePath);
    }

    /**
     * Get all TeamMembers
     * @summary getTeamMemberList
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamMemberApi
     */
    public 50e42d2216f357cb3fc2c9d04e56d568(options?: any) {
        return TeamMemberApiFp(this.configuration).50e42d2216f357cb3fc2c9d04e56d568(options)(this.fetch, this.basePath);
    }

    /**
     * Create TeamMember
     * @summary createTeamMember
     * @param {string} name 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamMemberApi
     */
    public 793a2f9812ee40dbbf2e79904985274c(name: string, options?: any) {
        return TeamMemberApiFp(this.configuration).793a2f9812ee40dbbf2e79904985274c(name, options)(this.fetch, this.basePath);
    }

    /**
     * Delete TeamMember
     * @summary deleteTeamMember
     * @param {number} id id of TeamMember
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamMemberApi
     */
    public 87f4ab442a55d282e1ebade1a87da9c3(id: number, options?: any) {
        return TeamMemberApiFp(this.configuration).87f4ab442a55d282e1ebade1a87da9c3(id, options)(this.fetch, this.basePath);
    }

    /**
     * Update TeamMember
     * @summary updateTeamMember
     * @param {string} name 
     * @param {number} id id of TeamMember
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamMemberApi
     */
    public d17af343b44e4ce310e0f9288ec00d3a(name: string, id: number, options?: any) {
        return TeamMemberApiFp(this.configuration).d17af343b44e4ce310e0f9288ec00d3a(name, id, options)(this.fetch, this.basePath);
    }

}
/**
 * TripLogsApi - fetch parameter creator
 * @export
 */
export const TripLogsApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Delete TripLogs
         * @summary deleteTripLogs
         * @param {number} id id of TripLogs
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        2458cebcb928d0cf634acaf03b114ba0(id: number, options: any = {}): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling 2458cebcb928d0cf634acaf03b114ba0.');
            }
            const localVarPath = `/tripLogs/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'DELETE' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Create TripLogs
         * @summary createTripLogs
         * @param {string} name 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        3b7d4d912acf1978ce1f451c27525b85(name: string, options: any = {}): FetchArgs {
            // verify required parameter 'name' is not null or undefined
            if (name === null || name === undefined) {
                throw new RequiredError('name','Required parameter name was null or undefined when calling 3b7d4d912acf1978ce1f451c27525b85.');
            }
            const localVarPath = `/tripLogs`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new url.URLSearchParams();

            if (name !== undefined) {
                localVarFormParams.set('name', name as any);
            }

            localVarHeaderParameter['Content-Type'] = 'application/x-www-form-urlencoded';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            localVarRequestOptions.body = localVarFormParams.toString();

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update TripLogs
         * @summary updateTripLogs
         * @param {string} name 
         * @param {number} id id of TripLogs
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        a395e23edaa4ccfce651904bf97ff304(name: string, id: number, options: any = {}): FetchArgs {
            // verify required parameter 'name' is not null or undefined
            if (name === null || name === undefined) {
                throw new RequiredError('name','Required parameter name was null or undefined when calling a395e23edaa4ccfce651904bf97ff304.');
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling a395e23edaa4ccfce651904bf97ff304.');
            }
            const localVarPath = `/tripLogs/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'PUT' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new url.URLSearchParams();

            if (name !== undefined) {
                localVarFormParams.set('name', name as any);
            }

            localVarHeaderParameter['Content-Type'] = 'application/x-www-form-urlencoded';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            localVarRequestOptions.body = localVarFormParams.toString();

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get TripLogs
         * @summary getTripLogsItem
         * @param {number} id id of TripLogs
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        b0be1724d2b4030ef83d5fe144802562(id: number, options: any = {}): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling b0be1724d2b4030ef83d5fe144802562.');
            }
            const localVarPath = `/tripLogs/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get all TripLogs
         * @summary getTripLogsList
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        c15a7f9a6008ff7e48676ca3cf804d45(options: any = {}): FetchArgs {
            const localVarPath = `/tripLogs`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * TripLogsApi - functional programming interface
 * @export
 */
export const TripLogsApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Delete TripLogs
         * @summary deleteTripLogs
         * @param {number} id id of TripLogs
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        2458cebcb928d0cf634acaf03b114ba0(id: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = TripLogsApiFetchParamCreator(configuration).2458cebcb928d0cf634acaf03b114ba0(id, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Create TripLogs
         * @summary createTripLogs
         * @param {string} name 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        3b7d4d912acf1978ce1f451c27525b85(name: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = TripLogsApiFetchParamCreator(configuration).3b7d4d912acf1978ce1f451c27525b85(name, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Update TripLogs
         * @summary updateTripLogs
         * @param {string} name 
         * @param {number} id id of TripLogs
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        a395e23edaa4ccfce651904bf97ff304(name: string, id: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = TripLogsApiFetchParamCreator(configuration).a395e23edaa4ccfce651904bf97ff304(name, id, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Get TripLogs
         * @summary getTripLogsItem
         * @param {number} id id of TripLogs
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        b0be1724d2b4030ef83d5fe144802562(id: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = TripLogsApiFetchParamCreator(configuration).b0be1724d2b4030ef83d5fe144802562(id, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Get all TripLogs
         * @summary getTripLogsList
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        c15a7f9a6008ff7e48676ca3cf804d45(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = TripLogsApiFetchParamCreator(configuration).c15a7f9a6008ff7e48676ca3cf804d45(options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * TripLogsApi - factory interface
 * @export
 */
export const TripLogsApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * Delete TripLogs
         * @summary deleteTripLogs
         * @param {number} id id of TripLogs
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        2458cebcb928d0cf634acaf03b114ba0(id: number, options?: any) {
            return TripLogsApiFp(configuration).2458cebcb928d0cf634acaf03b114ba0(id, options)(fetch, basePath);
        },
        /**
         * Create TripLogs
         * @summary createTripLogs
         * @param {string} name 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        3b7d4d912acf1978ce1f451c27525b85(name: string, options?: any) {
            return TripLogsApiFp(configuration).3b7d4d912acf1978ce1f451c27525b85(name, options)(fetch, basePath);
        },
        /**
         * Update TripLogs
         * @summary updateTripLogs
         * @param {string} name 
         * @param {number} id id of TripLogs
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        a395e23edaa4ccfce651904bf97ff304(name: string, id: number, options?: any) {
            return TripLogsApiFp(configuration).a395e23edaa4ccfce651904bf97ff304(name, id, options)(fetch, basePath);
        },
        /**
         * Get TripLogs
         * @summary getTripLogsItem
         * @param {number} id id of TripLogs
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        b0be1724d2b4030ef83d5fe144802562(id: number, options?: any) {
            return TripLogsApiFp(configuration).b0be1724d2b4030ef83d5fe144802562(id, options)(fetch, basePath);
        },
        /**
         * Get all TripLogs
         * @summary getTripLogsList
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        c15a7f9a6008ff7e48676ca3cf804d45(options?: any) {
            return TripLogsApiFp(configuration).c15a7f9a6008ff7e48676ca3cf804d45(options)(fetch, basePath);
        },
    };
};

/**
 * TripLogsApi - object-oriented interface
 * @export
 * @class TripLogsApi
 * @extends {BaseAPI}
 */
export class TripLogsApi extends BaseAPI {
    /**
     * Delete TripLogs
     * @summary deleteTripLogs
     * @param {number} id id of TripLogs
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TripLogsApi
     */
    public 2458cebcb928d0cf634acaf03b114ba0(id: number, options?: any) {
        return TripLogsApiFp(this.configuration).2458cebcb928d0cf634acaf03b114ba0(id, options)(this.fetch, this.basePath);
    }

    /**
     * Create TripLogs
     * @summary createTripLogs
     * @param {string} name 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TripLogsApi
     */
    public 3b7d4d912acf1978ce1f451c27525b85(name: string, options?: any) {
        return TripLogsApiFp(this.configuration).3b7d4d912acf1978ce1f451c27525b85(name, options)(this.fetch, this.basePath);
    }

    /**
     * Update TripLogs
     * @summary updateTripLogs
     * @param {string} name 
     * @param {number} id id of TripLogs
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TripLogsApi
     */
    public a395e23edaa4ccfce651904bf97ff304(name: string, id: number, options?: any) {
        return TripLogsApiFp(this.configuration).a395e23edaa4ccfce651904bf97ff304(name, id, options)(this.fetch, this.basePath);
    }

    /**
     * Get TripLogs
     * @summary getTripLogsItem
     * @param {number} id id of TripLogs
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TripLogsApi
     */
    public b0be1724d2b4030ef83d5fe144802562(id: number, options?: any) {
        return TripLogsApiFp(this.configuration).b0be1724d2b4030ef83d5fe144802562(id, options)(this.fetch, this.basePath);
    }

    /**
     * Get all TripLogs
     * @summary getTripLogsList
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TripLogsApi
     */
    public c15a7f9a6008ff7e48676ca3cf804d45(options?: any) {
        return TripLogsApiFp(this.configuration).c15a7f9a6008ff7e48676ca3cf804d45(options)(this.fetch, this.basePath);
    }

}
/**
 * UserApi - fetch parameter creator
 * @export
 */
export const UserApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Get all Users
         * @summary getUserList
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        1df092f5eddb2e29c3c5aa8043dd6d44(options: any = {}): FetchArgs {
            const localVarPath = `/users`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Create User
         * @summary createUser
         * @param {string} name 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        3465c05467f56755d8fde6dfe336f784(name: string, options: any = {}): FetchArgs {
            // verify required parameter 'name' is not null or undefined
            if (name === null || name === undefined) {
                throw new RequiredError('name','Required parameter name was null or undefined when calling 3465c05467f56755d8fde6dfe336f784.');
            }
            const localVarPath = `/users`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new url.URLSearchParams();

            if (name !== undefined) {
                localVarFormParams.set('name', name as any);
            }

            localVarHeaderParameter['Content-Type'] = 'application/x-www-form-urlencoded';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            localVarRequestOptions.body = localVarFormParams.toString();

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update User
         * @summary updateUser
         * @param {string} name 
         * @param {number} id id of User
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        acefdff5c10ad10456b5e12506f8ab63(name: string, id: number, options: any = {}): FetchArgs {
            // verify required parameter 'name' is not null or undefined
            if (name === null || name === undefined) {
                throw new RequiredError('name','Required parameter name was null or undefined when calling acefdff5c10ad10456b5e12506f8ab63.');
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling acefdff5c10ad10456b5e12506f8ab63.');
            }
            const localVarPath = `/users/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'PUT' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new url.URLSearchParams();

            if (name !== undefined) {
                localVarFormParams.set('name', name as any);
            }

            localVarHeaderParameter['Content-Type'] = 'application/x-www-form-urlencoded';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            localVarRequestOptions.body = localVarFormParams.toString();

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete User
         * @summary deleteUser
         * @param {number} id id of User
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        b3671c968c691df9358298f3a285c767(id: number, options: any = {}): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling b3671c968c691df9358298f3a285c767.');
            }
            const localVarPath = `/users/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'DELETE' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get User
         * @summary getUserItem
         * @param {number} id id of User
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ca775ff26d0144e4b01abbd8c926f7c3(id: number, options: any = {}): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling ca775ff26d0144e4b01abbd8c926f7c3.');
            }
            const localVarPath = `/users/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * UserApi - functional programming interface
 * @export
 */
export const UserApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Get all Users
         * @summary getUserList
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        1df092f5eddb2e29c3c5aa8043dd6d44(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = UserApiFetchParamCreator(configuration).1df092f5eddb2e29c3c5aa8043dd6d44(options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Create User
         * @summary createUser
         * @param {string} name 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        3465c05467f56755d8fde6dfe336f784(name: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = UserApiFetchParamCreator(configuration).3465c05467f56755d8fde6dfe336f784(name, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Update User
         * @summary updateUser
         * @param {string} name 
         * @param {number} id id of User
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        acefdff5c10ad10456b5e12506f8ab63(name: string, id: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = UserApiFetchParamCreator(configuration).acefdff5c10ad10456b5e12506f8ab63(name, id, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Delete User
         * @summary deleteUser
         * @param {number} id id of User
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        b3671c968c691df9358298f3a285c767(id: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = UserApiFetchParamCreator(configuration).b3671c968c691df9358298f3a285c767(id, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Get User
         * @summary getUserItem
         * @param {number} id id of User
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ca775ff26d0144e4b01abbd8c926f7c3(id: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = UserApiFetchParamCreator(configuration).ca775ff26d0144e4b01abbd8c926f7c3(id, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * UserApi - factory interface
 * @export
 */
export const UserApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * Get all Users
         * @summary getUserList
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        1df092f5eddb2e29c3c5aa8043dd6d44(options?: any) {
            return UserApiFp(configuration).1df092f5eddb2e29c3c5aa8043dd6d44(options)(fetch, basePath);
        },
        /**
         * Create User
         * @summary createUser
         * @param {string} name 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        3465c05467f56755d8fde6dfe336f784(name: string, options?: any) {
            return UserApiFp(configuration).3465c05467f56755d8fde6dfe336f784(name, options)(fetch, basePath);
        },
        /**
         * Update User
         * @summary updateUser
         * @param {string} name 
         * @param {number} id id of User
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        acefdff5c10ad10456b5e12506f8ab63(name: string, id: number, options?: any) {
            return UserApiFp(configuration).acefdff5c10ad10456b5e12506f8ab63(name, id, options)(fetch, basePath);
        },
        /**
         * Delete User
         * @summary deleteUser
         * @param {number} id id of User
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        b3671c968c691df9358298f3a285c767(id: number, options?: any) {
            return UserApiFp(configuration).b3671c968c691df9358298f3a285c767(id, options)(fetch, basePath);
        },
        /**
         * Get User
         * @summary getUserItem
         * @param {number} id id of User
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ca775ff26d0144e4b01abbd8c926f7c3(id: number, options?: any) {
            return UserApiFp(configuration).ca775ff26d0144e4b01abbd8c926f7c3(id, options)(fetch, basePath);
        },
    };
};

/**
 * UserApi - object-oriented interface
 * @export
 * @class UserApi
 * @extends {BaseAPI}
 */
export class UserApi extends BaseAPI {
    /**
     * Get all Users
     * @summary getUserList
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public 1df092f5eddb2e29c3c5aa8043dd6d44(options?: any) {
        return UserApiFp(this.configuration).1df092f5eddb2e29c3c5aa8043dd6d44(options)(this.fetch, this.basePath);
    }

    /**
     * Create User
     * @summary createUser
     * @param {string} name 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public 3465c05467f56755d8fde6dfe336f784(name: string, options?: any) {
        return UserApiFp(this.configuration).3465c05467f56755d8fde6dfe336f784(name, options)(this.fetch, this.basePath);
    }

    /**
     * Update User
     * @summary updateUser
     * @param {string} name 
     * @param {number} id id of User
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public acefdff5c10ad10456b5e12506f8ab63(name: string, id: number, options?: any) {
        return UserApiFp(this.configuration).acefdff5c10ad10456b5e12506f8ab63(name, id, options)(this.fetch, this.basePath);
    }

    /**
     * Delete User
     * @summary deleteUser
     * @param {number} id id of User
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public b3671c968c691df9358298f3a285c767(id: number, options?: any) {
        return UserApiFp(this.configuration).b3671c968c691df9358298f3a285c767(id, options)(this.fetch, this.basePath);
    }

    /**
     * Get User
     * @summary getUserItem
     * @param {number} id id of User
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public ca775ff26d0144e4b01abbd8c926f7c3(id: number, options?: any) {
        return UserApiFp(this.configuration).ca775ff26d0144e4b01abbd8c926f7c3(id, options)(this.fetch, this.basePath);
    }

}
